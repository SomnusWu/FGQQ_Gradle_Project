package com.llg.privateproject.adapters;

import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import com.bjg.lcc.alipay.pay.PayActivity;
import com.bjg.lcc.jsonparser.ParseJson;
import com.bjg.lcc.privateproject.R;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.llg.help.MyFormat;
import com.llg.privateproject.AppContext;
import com.llg.privateproject.actvity.AdvertisementDetailAty;
import com.llg.privateproject.actvity.GetRedPackage;
import com.llg.privateproject.adapters.BusinessAdapter.ViewHolder;
import com.llg.privateproject.entities.Advertisement;
import com.llg.privateproject.entities.AttentionAdvertisement;
import com.llg.privateproject.entities.UserInformation;
import com.llg.privateproject.fragment.BaseActivity;
import com.llg.privateproject.fragment.BaseActivity.Refresh;
import com.llg.privateproject.html.AndroidCallBack.HttpCallback;
import com.llg.privateproject.utils.CommonUtils;
import com.llg.privateproject.view.CustomProgressSmall;
import com.llg.privateproject.view.DialogAuthentication;
import com.llg.privateproject.view.DialogAuthentication.onConfirmListener;
import com.llg.privateproject.view.Gerenziliao_Dialog;
import com.llg.privateproject.view.Gerenziliao_Dialog.OnDeleteListener;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.Toast;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class AdvertisementAdapter extends BaseAdapter {
	private List<Advertisement> list;
	private Context context;
	private LayoutInflater inflater;
	private CustomProgressSmall customProgressSmall;
	private Gerenziliao_Dialog dialog;

	public AdvertisementAdapter(Context context, List<Advertisement> list) {
		// TODO Auto-generated constructor stub
		this.context = context;
		inflater = LayoutInflater.from(context);
		this.list = list;
	}

	@Override
	public int getCount() {
		// TODO Auto-generated method stub
//		(list == null) ? 0 : list.size()
		return 0;
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return position;
	}

	@Override
	public View getView(final int position, View v, ViewGroup arg2) {
		// TODO Auto-generated method stub
		final ViewHolder holder;
		if (v == null) {
			holder = new ViewHolder();
			Log.i("tag", position + "************position***********");
			v = inflater.inflate(R.layout.listitem_advertisement, null);
			Log.i("tag", v.hashCode()+ "************conertview***********");
			holder.iv = (ImageView) v.findViewById(R.id.iv);
			holder.ivZhuan = (ImageView) v.findViewById(R.id.iv_zhuan);
			holder.tvTime = (TextView) v.findViewById(R.id.tv_time);
			holder.tvIsDraw = (TextView) v.findViewById(R.id.tv_isCanDraw);
			holder.tvIsRuning = (TextView) v.findViewById(R.id.tv_isRuning);
			holder.tvLocation = (TextView) v.findViewById(R.id.tv_location);
			holder.tvDelete = (TextView) v.findViewById(R.id.tv_delete);
			holder.tvIsStart = (TextView) v.findViewById(R.id.tv_isStart);
			holder.tvDetail = (TextView) v.findViewById(R.id.tv_detail);
			v.setTag(holder);
		} else {
			holder = (ViewHolder) v.getTag();
		}
		// Log.i("tag", list.get(position).getAdLocation()
		// + "-------------list.get(position).getAdLocation()");
		String strTime = list.get(position).getCREATE_DATE();
		String time;
		final String isMine = list.get(position).getFORWARD_OR_MY();
		Log.i("tag", isMine + "--------isMine------");
		if (strTime != null && isMine != null && isMine.equals("my")) {
			time = MyFormat.getTimeFormat2(strTime);
			holder.tvIsStart.setVisibility(View.VISIBLE);
			holder.tvTime.setText("创建时间" + time);
			holder.ivZhuan.setVisibility(View.GONE);
		} else if (strTime != null && isMine != null
				&& isMine.equals("forward")) {
			time = MyFormat.getTimeFormat2(strTime);
//			Log.i("tag", isMine + "--------执行了设置isMine------");
//			Log.i("tag", position + "--------执行了设置position------");
			holder.tvTime.setText("转载时间" + time);
			holder.ivZhuan.setVisibility(View.VISIBLE);
		}
		final String mstatus = list.get(position).getAD_STATUS();
//		Log.i("tag", mstatus + "************mstatus***********");
		if (mstatus != null) {
			if (isMine.equals("my")) {
				holder.tvIsStart.setVisibility(View.VISIBLE);
				if (mstatus.equals("1")) {
					holder.tvIsStart.setText("暂停广告");
					holder.tvIsRuning.setText("广告进行中");
				} else if (mstatus.equals("2")) {
					holder.tvIsStart.setText("启动广告");
					holder.tvIsRuning.setText("广告闲置中");
				} else if (mstatus.equals("3")) {
					holder.tvIsStart.setText("去支付");
					holder.tvIsRuning.setText("广告闲置中");
				}
			} else if (isMine.equals("forward")) {
//				Log.i("tag", isMine + "********forward****isMine***********");
//				Log.i("tag", position
//						+ "**********forward**position***********");
				holder.tvIsStart.setVisibility(View.GONE);
				holder.tvIsRuning.setVisibility(View.GONE);
			}
		}
		final DecimalFormat decimalFormat = new DecimalFormat(".00");
		final Double money = list.get(position).getMONEY();
		final Integer CO = list.get(position).getCO_AMOUNT();
		holder.tvIsStart.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if (mstatus.equals("1")) {
					requesPauseOrStart(position,
							UserInformation.getAccess_token(), "2");
				} else if (mstatus.equals("2")) {
					requesPauseOrStart(position,
							UserInformation.getAccess_token(), "1");
				} else if (mstatus.equals("3")) {
					final DialogAuthentication dialogAuthentication = new DialogAuthentication(
							context);
					dialogAuthentication
							.setOnConfirmListener(new onConfirmListener() {

								@Override
								public void request() {
									// TODO Auto-generated method stub
									dialogAuthentication.dismiss();
									customProgressSmall = CustomProgressSmall
											.initDialog(context, "正在支付中", true,
													new OnCancelListener() {

														@Override
														public void onCancel(
																DialogInterface arg0) {
															// TODO
															// Auto-generated
															// method stub
															customProgressSmall
																	.dismiss();
														}
													});
									customProgressSmall.show();
									if (money != null) {
										Double doubleMoney = Double
												.parseDouble(decimalFormat
														.format(money));
									}
									requesPay(position,
											UserInformation.getAccess_token(),
											money);
								}
							});
					dialogAuthentication.initUI();
					dialogAuthentication.setTitle("支付");
					dialogAuthentication.setMessage("本次需要支付现金"
							+ list.get(position).getMONEY() + "元," + "需要支付CO币"
							+ list.get(position).getCO_AMOUNT() + "个,"
							+ "账户酷币余额不足折算成现金支付,10个酷币等于1元现金");
					dialogAuthentication.show();
				}
			}
		});
		holder.tvDetail.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				Intent intent = null;
				if (isMine.equals("my")) {
					intent = new Intent(context, AdvertisementDetailAty.class);
				} else if (isMine.equals("forward")) {
					intent = new Intent(context, GetRedPackage.class);
					intent.putExtra("img", list.get(position)
							.getCOVER_IMAGE_URL());
					intent.putExtra("adForwardId", list.get(position)
							.getAD_FORWARD_ID());
				}
				String id = list.get(position).getID();
				if (id != null) {
					intent.putExtra("adInfoId", list.get(position).getID());
				}
				context.startActivity(intent);
			}
		});
		holder.tvDelete.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				final Gerenziliao_Dialog dialog = new Gerenziliao_Dialog(
						context, 5, "亲,确认删除该广告吗？");
				dialog.show();
				WindowManager.LayoutParams lp = dialog.getWindow()
						.getAttributes();
				lp.width = AppContext.getScreenWidth() * 4 / 5;
				lp.height = AppContext.getScreenWidth() / 2;
				dialog.getWindow().setAttributes(lp);
				dialog.setOnDeleteListener(new OnDeleteListener() {

					@Override
					public void deleteAddress() {
						// TODO Auto-generated method stub
						dialog.dismiss();
						customProgressSmall = CustomProgressSmall.initDialog(
								context, "正在删除中", true, new OnCancelListener() {

									@Override
									public void onCancel(DialogInterface arg0) {
										// TODO Auto-generated
										// method stub
										customProgressSmall.dismiss();
									}
								});
						customProgressSmall.show();
						requestHttp(position, UserInformation.getAccess_token());
					}
				});
			}
		});
		// holder.tvIsDraw.setText(list.get(position).getCreateDate());
		String adLocation = list.get(position).getAD_LOCATION();
		if (adLocation.equals("APP_START_PAGE")) {
			holder.tvLocation.setText("首页弹窗广告");
		}
		ViewTreeObserver vto = holder.iv.getViewTreeObserver();
		vto.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
			@Override
			public void onGlobalLayout() {
				if (position == list.size()) {
					holder.iv.getViewTreeObserver()
							.removeGlobalOnLayoutListener(this);
				}
				int width = holder.iv.getWidth();
				holder.iv.setLayoutParams(new LayoutParams(width,
						(int) (width * 0.5)));
			}
		});
		MyFormat.setBitmap(context, holder.iv, list.get(position)
				.getCOVER_IMAGE_URL(), 0, 0);

		return v;
	}

	public void upData(List<Advertisement> list) {
		this.list = list;
		Log.i("tag", list.size() + "-------------list.size()");
		notifyDataSetChanged();
	}

	/**
	 * 发起删除广告请求
	 */
	private void requestHttp(final int position, String access_token) {
		RequestParams params = new RequestParams();
		params.addQueryStringParameter("access_token", access_token);
		if (list.get(position).getID() == null) {
			Toast.makeText(context, "图片id不存在", Toast.LENGTH_SHORT).show();
			return;
		}
		params.addQueryStringParameter("id", list.get(position).getID());
		AppContext.getHtmlUitls().xUtilsm(context, HttpMethod.POST,

		"m/ad/deleteAd", params, new HttpCallback() {

			@Override
			public void onError(String msg) {
				// TODO Auto-generated method stub
				// autoLoading.showExceptionLayout();
				customProgressSmall.dismiss();
				Toast.makeText(context, "删除失败", Toast.LENGTH_SHORT).show();
				Log.i("tag", msg + "--------进来了--msg------");
			}

			@Override
			public void onBack(JSONObject json) {
				// TODO Auto-generated method stub
				ParseJson parseJson = ParseJson.getParseJson();
				Map<String, Object> map = parseJson.parseIsSuccess(json);
				Log.i("tag", "--------进来了图片onBack------");
				Log.i("tag", (Boolean) map.get("isSuccess")
						+ "--------------isSuccess-----" + json);
				// customProgressSmall.dismiss();
				if ((Boolean) map.get("isSuccess")) {
					list.remove(position);
					customProgressSmall.dismiss();
					notifyDataSetChanged();
					Toast.makeText(context, "删除成功", Toast.LENGTH_SHORT).show();
				} else if (map.get("errorCode") != null) {
					((BaseActivity) context).setRefreshListtener(new Refresh() {

						@Override
						public void refreshRequst(String access_token) {
							// TODO Auto-generated method stub
							requestHttp(position, access_token);
						}
					});
					((BaseActivity) context).RefeshToken();
				}
			}
		});
	}

	/**
	 * 暂停或者启动广告
	 */
	private void requesPauseOrStart(final int position, String access_token,
			final String status) {
		RequestParams params = new RequestParams();
		params.addQueryStringParameter("access_token", access_token);
		if (list.get(position).getID() == null) {
			Toast.makeText(context, "广告不存在", Toast.LENGTH_SHORT).show();
			return;
		}
		params.addQueryStringParameter("adInfoId", list.get(position).getID());
		params.addQueryStringParameter("status", status);
		AppContext.getHtmlUitls().xUtilsm(context, HttpMethod.POST,

		"m/ad/doChangeAdForwardStatus", params, new HttpCallback() {

			@Override
			public void onError(String msg) {
				// TODO Auto-generated method stub
				// autoLoading.showExceptionLayout();
				Toast.makeText(context, "操作失败", Toast.LENGTH_SHORT).show();
				Log.i("tag", msg + "--------进来了--msg------");
			}

			@Override
			public void onBack(JSONObject json) {
				// TODO Auto-generated method stub
				ParseJson parseJson = ParseJson.getParseJson();
				Map<String, Object> map = parseJson.parseIsSuccess(json);
				Log.i("tag", "--------进来了图片onBack------");
				Log.i("tag", (Boolean) map.get("isSuccess")
						+ "--------------isSuccess-----" + json);
				// customProgressSmall.dismiss();
				if ((Boolean) map.get("isSuccess")) {
					customProgressSmall.dismiss();
					notifyDataSetChanged();
				} else if (map.get("errorCode") != null) {
					((BaseActivity) context).setRefreshListtener(new Refresh() {

						@Override
						public void refreshRequst(String access_token) {
							// TODO Auto-generated method stub

							requesPauseOrStart(position, access_token, status);
						}
					});
					((BaseActivity) context).RefeshToken();
				}
			}
		});
	}

	class ViewHolder {
		private ImageView iv;// 图片
		private ImageView ivZhuan;// 图片
		private TextView tvTime;// 创建时间
		private TextView tvIsRuning;// 广告是否处于启动中;
		private TextView tvIsDraw;// 是否还有剩余红包
		private TextView tvDelete;// 删除广告
		private TextView tvLocation;// 广告位置
		private TextView tvIsStart;// 启动，暂停广告
		private TextView tvDetail;// 启动，暂停广告
		private TextView tvSend;
	}

	/**
	 * 请求去支付
	 */
	private void requesPay(final int position, String access_token,
			final Double money) {
		RequestParams params = new RequestParams();
		params.addQueryStringParameter("access_token", access_token);
		if (list.get(position).getID() == null) {
			Toast.makeText(context, "广告不存在", Toast.LENGTH_SHORT).show();
			return;
		}
		params.addQueryStringParameter("adInfoId", list.get(position).getID());
		AppContext.getHtmlUitls().xUtilsm(context, HttpMethod.POST,

		"m/order/saveAdOrder", params, new HttpCallback() {

			@Override
			public void onError(String msg) {
				// TODO Auto-generated method stub
				// autoLoading.showExceptionLayout();
				customProgressSmall.dismiss();
				Toast.makeText(context, "支付失败", Toast.LENGTH_SHORT).show();
				Log.i("tag", msg + "--------进来了--msg------");
			}

			@Override
			public void onBack(JSONObject json) {
				// TODO Auto-generated method stub
				ParseJson parseJson = ParseJson.getParseJson();
				Map<String, Object> map = parseJson.parseIsSuccess(json);
				Log.i("tag", (Boolean) map.get("isSuccess")
						+ "--------------isSuccess-----" + json);
				// customProgressSmall.dismiss();
				if ((Boolean) map.get("isSuccess")) {
					String id = null;
					try {
						id = json.getJSONObject("obj").optString("id");
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					customProgressSmall.dismiss();
					Intent intent = new Intent(context, PayActivity.class);
					Log.i("tag", money + "****************上传的money********");
					Log.i("tag", id + "***************上传的id***********");
					intent.putExtra("price", money);
					intent.putExtra("code", id);
					context.startActivity(intent);
				} else if (map.get("errorCode") != null) {
					((BaseActivity) context).setRefreshListtener(new Refresh() {

						@Override
						public void refreshRequst(String access_token) {
							// TODO Auto-generated method stub
							requesPay(position, access_token, money);
						}
					});
					((BaseActivity) context).RefeshToken();
				}
			}
		});
	}

}
