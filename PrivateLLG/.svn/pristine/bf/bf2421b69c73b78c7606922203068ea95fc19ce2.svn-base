package com.llg.privateproject.actvity;

import java.io.File;

import java.sql.Ref;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;

import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.Intent;

import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;

import com.bjg.lcc.jsonparser.ParseJson;
import com.bjg.lcc.privateproject.R;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.llg.help.Util;
import com.llg.privateproject.AppContext;
import com.llg.privateproject.camera.FileManager;
import com.llg.privateproject.entities.UserInformation;
import com.llg.privateproject.fragment.BaseActivity;
import com.llg.privateproject.fragment.BaseActivity.Refresh;
import com.llg.privateproject.html.AndroidCallBack.HttpCallback;
import com.llg.privateproject.utils.ImageTools;
import com.llg.privateproject.view.CustomProgressSmall;
import com.llg.privateproject.view.DialogUploadPhoto;
import com.llg.privateproject.view.ProductDetailEllipsisPoPuWindow;
import com.llg.privateproject.view.ProductDetailEllipsisPoPuWindow.MineSelectListenr;
import com.llg.privateproject.view.ProductDetailEllipsisPoPuWindow.SelecetListener;

/**
 * @author cc
 * 
 */
public class PutAdvertisementAty extends BaseActivity implements
		SelecetListener, MineSelectListenr {

	private String filename;

	private List<String> list;
	private ProductDetailEllipsisPoPuWindow window;
	@ViewInject(R.id.tv_advertisement)
	private TextView tvAdvertisement;

	/**
	 * 投放酷币总数
	 */
	@ViewInject(R.id.edt_co_number)
	private EditText edtCoNumber;
	/**
	 * 每人可领取CO币个数
	 */
	@ViewInject(R.id.edt_draw_number)
	private EditText edtDrawNumber;
	/**
	 * 每人随机领取现金最小值
	 */
	@ViewInject(R.id.edt_random_small)
	private EditText edtRandomSmall;
	/**
	 * 投入现金总额
	 */
	@ViewInject(R.id.edt_money_total)
	private EditText edtMoneyTotal;
	/**
	 * 每人随机领取现金最大值
	 */
	@ViewInject(R.id.edt_random_big)
	private EditText edtRandomBig;

	private File file;
	@ViewInject(R.id.iv_guanggao)
	private ImageView iv;
	private String imgID;// 图片ID
	private String adLoacationName;// 广告位分类名字

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		Log.i("tag", "-------------进入了onCreate");
		setContentView(R.layout.aty_put_advertisement);
		ViewUtils.inject(this);
		initData();
		initUI();
	}

	private void initData() {
		list = new ArrayList<String>();
		list.add("app投放广告");
		list.add("app");
	}

	/**
	 * 初始化界面
	 */
	private void initUI() {
		ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_spinner_item, list);
		// LayoutParams params = (LayoutParams) iv.getLayoutParams();
		// params.width = AppContext.getScreenWidth() / 2;
		// params.height = (int) (AppContext.getScreenWidth() / 2 * 0.4);
		// iv.setLayoutParams(params);
	}

	@OnClick({ R.id.iv_back, R.id.tv_advertisement, R.id.tv, R.id.btn_upload,
			R.id.tv_confirm })
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.iv_back:
			finish();
			break;
		case R.id.tv_confirm:
			// startActivity(new Intent(this, MineAdvertisementAty.class));
			// if (imgID == null) {
			// Toast.makeText(PutAdvertisementAty.this, "请上传图片",
			// Toast.LENGTH_SHORT).show();
			// return;
			// }
			verifyData();
			break;
		case R.id.btn_upload:
			Intent intent = new Intent(this,
					com.llg.privateproject.camera.PopupSelectImage.class);
			intent.putExtra("isCrop", false);
			startActivityForResult(intent, 1);
			break;
		case R.id.tv_advertisement:
			window = new ProductDetailEllipsisPoPuWindow(this, this, 4,
					tvAdvertisement);
			window.setOnMineSelectListener(this);
			break;

		default:
			break;
		}
	}

	private void verifyData() {
		// TODO Auto-generated method stub
		if (adLoacationName == null) {
			toast("请选择广告位种类");
			return;
		}
		if (imgID == null) {
			toast("请上传图片");
			return;
		}
		String stredtMoneyTotal = getStr(edtMoneyTotal);
		String stredtRandomSmall = getStr(edtRandomSmall);
		String stredtRandomBig = getStr(edtRandomBig);
		String stredtDrawNumber = getStr(edtDrawNumber);
		String stredtCoNumber = getStr(edtCoNumber);
		if (stredtMoneyTotal.length() > 0) {
			if (!Util.isDouble(stredtMoneyTotal)) {
				toast("总现金小数点后最多只能输入两位");
				return;
			}
			if (stredtRandomSmall.length() == 0
					|| stredtRandomBig.length() == 0) {
				toast("请输入现金领取值");
				return;
			}
			if (!Util.isDouble(stredtRandomSmall)
					|| !Util.isDouble(stredtRandomBig)) {
				toast("现金领取值小数点后最多只能输入两位小数");
				return;
			}
			try {
				Double smallMoney = Double.parseDouble(stredtRandomSmall);
				Double bigMoney = Double.parseDouble(stredtRandomBig);
				Double MoneyTotal = Double.parseDouble(stredtMoneyTotal);
				if (bigMoney - smallMoney < 0
						|| (MoneyTotal - smallMoney < 0 || MoneyTotal
								- bigMoney < 0)) {
					toast("请输入合法现金领取值");
					return;
				}
			} catch (Exception e) {
				// TODO: handle exception
			}
		}
		if (stredtCoNumber.length() > 0) {
			if (stredtDrawNumber.length() == 0) {
				toast("请输入co币领取值");
				return;
			}
			if ((stredtCoNumber.substring(0, 1).equals("0") || stredtDrawNumber.substring(0, 1).equals("0"))) {
				toast("请输入合法co币值");
				return;
			}
			try {
				int CoNumber = Integer.parseInt(stredtCoNumber);
				int DrawNumber = Integer.parseInt(stredtDrawNumber);
				if (CoNumber - DrawNumber < 0) {
					toast("请输入合法co币领取值");
				}
			} catch (Exception e) {
				// TODO: handle exception
			}
		}
		customProgressSmall.setMessage("正在加载中");
		customProgressSmall.show();
		uploadAdvertisement(UserInformation.getAccess_token());
	}

	/**
	 * 上传广告
	 */
	private void uploadAdvertisement(String access_token) {
		RequestParams params = new RequestParams();
		params.addQueryStringParameter("access_token", access_token);
		params.addQueryStringParameter("imageId", imgID);// 图片ID
		params.addQueryStringParameter("adLocationName", adLoacationName);// 广告位名称code
		Log.i("tag", access_token+"--uploadAdvertisement---access_token--------");
		if (getStr(edtMoneyTotal).length() > 0) {
			params.addQueryStringParameter("money", getStr(edtMoneyTotal));// 现金总额
			params.addQueryStringParameter("moneyMin", getStr(edtRandomSmall));// 最小获取现金值
			params.addQueryStringParameter("moneyMax", getStr(edtRandomBig));// 最大获取现金值
		}
		if (getStr(edtCoNumber).length() > 0) {
			params.addQueryStringParameter("coAmount", getStr(edtCoNumber));// 投放co币总额
			params.addQueryStringParameter("coMin", getStr(edtDrawNumber));// 每人可领取co币最少值
		}
		Log.i("tag", adLoacationName + "----adLoacationName-----");
		Log.i("tag", imgID + "----imgID-----");
		params.addHeader("X-Requested-With", "XMLHttpRequest");
		AppContext.getHtmlUitls().xUtilsm(this, HttpMethod.POST,

		"m/ad/saveNormalAd", params, new HttpCallback() {

			@Override
			public void onError(String msg) {
				// TODO Auto-generated method stub
				customProgressSmall.dismiss();
				Toast.makeText(PutAdvertisementAty.this, "加载页面异常",
						Toast.LENGTH_SHORT).show();
				Log.i("tag", msg + "----------msg------");
			}

			@Override
			public void onBack(JSONObject json) {
				// TODO Auto-generated method stub
				Map<String, Object> map = ParseJson.getParseJson()
						.parseIsSuccess(json);
				Log.i("tag", json + "--------json------");
				customProgressSmall.dismiss();
				if ((Boolean) map.get("isSuccess")) {
					Toast.makeText(PutAdvertisementAty.this, "投放广告成功",
							Toast.LENGTH_SHORT).show();
					customProgressSmall.dismiss();
					setResult(RESULT_OK);
					PutAdvertisementAty.this.finish();
				} else if (map.get("errorCode") .equals("NOT_LOGIN")) {
					setRefreshListtener(new Refresh() {

						@Override
						public void refreshRequst(String access_token) {
							// TODO Auto-generated method stub
							uploadAdvertisement(access_token);
						}
					});
					RefeshToken();
				}
			}
		});
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == 1 && resultCode == RESULT_OK) {
			file = (File) data.getSerializableExtra("file");
			BitmapUtils bitmapUtils = new BitmapUtils(this);
			Log.i("tag", (bitmapUtils == null) + "-----bitmapUtils");
			bitmapUtils.display(iv, file.getAbsolutePath());
			setRefreshListener(new RefreshImgID() {
				@Override
				public void refreshImgID(String imgID) {
					// TODO Auto-generated method stub
					PutAdvertisementAty.this.imgID = imgID;
				}
			});
			uploadPhoto(file,
					AppContext.getUserInformation().getAccess_token(), this);
		}
	}

	// // 上传图片
	// private void uploadPhoto() {
	// customProgressSmall = CustomProgressSmall.showdialog(this, "正在上传图片",
	// true, new OnCancelListener() {
	// @Override
	// public void onCancel(DialogInterface arg0) {
	// // TODO Auto-generated method stub
	// customProgressSmall.dismiss();
	// }
	// });
	// Log.i("tag", customProgressSmall.toString()
	// + "******************customProgressSmall");
	// Log.i("tag", filename + "******************uploadPath");
	// RequestParams params = new RequestParams();
	// params.addQueryStringParameter("access_token", AppContext
	// .getUserInformation().getAccess_token());
	// params.addBodyParameter("img", file);
	// AppContext.getHtmlUitls().xUtilsm(this, HttpMethod.POST,
	// "m/sys/saveOrUpdateIcon", params, new HttpCallback() {
	//
	// @Override
	// public void onError(String msg) {
	// // TODO Auto-generated method stub
	// customProgressSmall.dismiss();
	// Toast.makeText(PutAdvertisementAty.this, msg,
	// Toast.LENGTH_SHORT).show();
	// Log.i("tag", msg + "--------进来了--msg------");
	// }
	//
	// @Override
	// public void onBack(JSONObject json) {
	// // TODO Auto-generated method stub
	// ParseJson parseJson = ParseJson.getParseJson();
	// Map<String, Object> map = ParseJson.getParseJson()
	// .parseIsSuccess(json);
	// Log.i("tag", "--------进来了图片onBack------");
	// Log.i("tag", (Boolean) map.get("isSuccess")+
	// "--------------isSuccess-----"
	// + json);
	// // customProgressSmall.dismiss();
	// if ((Boolean) map.get("isSuccess")) {
	// imgID = parseJson.parseImg(json);
	// Toast.makeText(PutAdvertisementAty.this, imgID,
	// Toast.LENGTH_LONG).show();
	// Log.i("tag", json.toString()
	// + "*******-----json------***********");
	// customProgressSmall.dismiss();
	// }else if (map.get("errorCode")!=null) {
	// setRefreshListtener(new Refresh() {
	// @Override
	// public void refreshRequst(String access_token) {
	// // TODO Auto-generated method stub
	// Log.i("tag", "------监听里-------");
	// // uploadPhoto(access_token);
	// }
	// });
	// RefeshToken();
	// }
	// }
	// });
	// }

	@Override
	public void setMessage(String message, int type) {
		// TODO Auto-generated method stub
		tvAdvertisement.setText(message);
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		File mfile = new File(FileManager.getCompressFilePath());
		if (mfile.exists()) {
			File[] array = mfile.listFiles();
			for (int i = 0; i < array.length; i++) {
				array[i].delete();
			}
		}
	}

	@Override
	public void setAdLocationName(String str) {
		// TODO Auto-generated method stub
		adLoacationName = str;
	}
}
