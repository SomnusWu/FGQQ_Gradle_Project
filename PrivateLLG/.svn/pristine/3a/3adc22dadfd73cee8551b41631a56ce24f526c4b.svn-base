package com.llg.privateproject.actvity;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Random;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.RadialGradient;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Handler;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.TextView;
import android.widget.Toast;

import com.bjg.lcc.privateproject.R;
import com.finddreams.sortedcontact.BitmapUtil;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.bitmap.BitmapDisplayConfig;
import com.lidroid.xutils.bitmap.BitmapGlobalConfig;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.llg.help.GetProgressBar;
import com.llg.help.MyFormat;
import com.llg.help.SaveImg;
import com.llg.help.Util;
import com.llg.privateproject.AppContext;
import com.llg.privateproject.entities.UserInformation;
import com.llg.privateproject.fragment.BaseActivity;
import com.llg.privateproject.fragment.BaseActivity.Refresh;
import com.llg.privateproject.html.AndroidCallBack.HttpCallback;
import com.llg.privateproject.utils.CommonUtils;
import com.llg.privateproject.view.ProductDetailEllipsisPoPuWindow;
import com.llg.privateproject.view.ProductDetailEllipsisPoPuWindow.SelecetListener;
import com.tencent.android.tpush.XGPushClickedResult;
import com.tencent.android.tpush.XGPushManager;
import com.tencent.mm.sdk.modelmsg.SendMessageToWX;
import com.tencent.mm.sdk.modelmsg.WXMediaMessage;
import com.tencent.mm.sdk.modelmsg.WXWebpageObject;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.mm.sdk.openapi.WXAPIFactory;


/** 获取红包界面 */
public class GetRedPackage extends BaseActivity implements SelecetListener,
		OnCheckedChangeListener {
	/** 标题 */
	@ViewInject(R.id.head_tilte)
	private TextView head_tilte;
	/** 分享 */
	@ViewInject(R.id.more)
	private ImageView head_tilte2;
	/** 问题 */
	@ViewInject(R.id.question)
	public TextView question;
	/** 答案 */
	@ViewInject(R.id.answer)
	public TextView answer;
	/** 验证码 */
	@ViewInject(R.id.eanswer)
	public EditText eanswer;
	/** 评论内容 */
	@ViewInject(R.id.et_comment)
	public EditText et_comment;
	/** 提交评论内容 */
	@ViewInject(R.id.tv_comment)
	public TextView tv_comment;

	@ViewInject(R.id.rg)
	private RadioGroup rg;
	@ViewInject(R.id.tb1)
	private RadioButton rb1;
	@ViewInject(R.id.tb2)
	private RadioButton rb2;
	@ViewInject(R.id.tb3)
	private RadioButton rb3;
	@ViewInject(R.id.tb4)
	private RadioButton rb4;
	/** 问题 */
	@ViewInject(R.id.tv_question)
	public TextView tv_question;
	/** 领取红包金额提示 */
	@ViewInject(R.id.red_package_hint)
	private TextView red_package_hint;
	/** 红包入账提示金额提示 */
	@ViewInject(R.id.fgqqg)
	private TextView fgqqg;
	/** 离开 */
	@ViewInject(R.id.turn)
	private ImageView turn;
	/** 问题布局 */
	@ViewInject(R.id.ll_q)
	private LinearLayout ll_q;
	/** 抢到红包提示布局 */
	@ViewInject(R.id.ll_red_hint)
	private LinearLayout ll_red_hint;
	/** 获取提示布局 */
	@ViewInject(R.id.lll)
	private LinearLayout lll;
	/**评价布局 */
	@ViewInject(R.id.ll_pingjia)
	private LinearLayout ll_pingjia;
	/** 查看更多 */
	@ViewInject(R.id.to_see1)
	private TextView to_see;
	/** 布局背景广告图片 */
	@ViewInject(R.id.ll)
	private ImageView ll;
	private String adInfoId;
	private String adRedEnvelopId;
	private ProductDetailEllipsisPoPuWindow ellipticalsisWindow;
	//
	// @ViewInject(R.id.v1)
	// private View v1;
	// @ViewInject(R.id.v2)
	// private View v2;
	private String objectId = "";
	private String img = "";
	private String objectType = "";
	private String id;
	String co = "";
	String money = "";
	String mesg = "";
	AppContext appContext;
	String questionStr = "";
	String adForwardId = "";
	private IWXAPI api;
	private String QUESTION = "";// 问题
	private String ERROR_ANSWER1 = "";
	private String ERROR_ANSWER2 = "";
	private String ERROR_ANSWER3 = "";
	private String CORRECT_ANSWER = "";// 答案
	private String select_answer = "";// 选择的答案
	private String TITLE = "";
	private SoundPool soudPool;
	private int play;
	  private Random random = new Random(); 
	//数组大小    
    private static final int SIZE = 4;    
    //要重排序的数组    
    private String[] positions = new String[SIZE];
	Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 0:// 失败

				break;

			case 1:// 领取红包成功
//				soundID a soundID returned by the load() function
//				leftVolume left volume value (range = 0.0 to 1.0)
//				rightVolume right volume value (range = 0.0 to 1.0)
//				priority stream priority (0 = lowest priority)
//				loop loop mode (0 = no loop, -1 = loop forever)
//				rate playback rate (1.0 = normal playback, range 0.5 to 2.0)
				
				
				if (co.length() > 0 && money.length() > 0) {
					ll_red_hint.setVisibility(View.VISIBLE);
					soudPool.play(play,1, 1, 0, 0, 1);
					red_package_hint.setText("恭喜你获取红包:"
							+ MyFormat.getPriceFormat(money) + "元,获取酷币:" + co
							+ "个!");
				} else if (co.length() > 0 && money.length() < 1) {
					ll_red_hint.setVisibility(View.VISIBLE);
					soudPool.play(play,1, 1, 0, 0, 1);
					red_package_hint.setText("恭喜你获取酷币:" + co + "个!");

				} else if (co.length() < 1 && money.length() > 0) {
					ll_red_hint.setVisibility(View.VISIBLE);
					soudPool.play(play,1, 1, 0, 0, 1);
					red_package_hint.setText("恭喜你获取红包:"
							+ MyFormat.getPriceFormat(money) + "元!");

				} else if (mesg != null && mesg.length() > 0) {
					fgqqg.setTextColor(getResources().getColor(R.color.black2));
					fgqqg.setText(mesg);
				}
				if (getIntent().getBooleanExtra("isDialog", false)) {
					new CountDownTimer(5 * 1000, 1000) {

						@Override
						public void onTick(long millisUntilFinished) {
							// TODO Auto-generated method stub

						}

						@Override
						public void onFinish() {
							// TODO Auto-generated method stub
							finish();
						}
					}.start();
				}
				eanswer.setText("");
				break;
			case 2:// 获取问题

				break;
			case 3:// 清空 评论类容
				et_comment.setText("");
				break;
			case 4:// 获取广告详情
				if (objectId != null && objectId.length() > 5) {
					to_see.setVisibility(View.VISIBLE);
				if(objectType.equals("4"))	{
					to_see.setText("外网详情");	
				}
				}else{
						to_see.setVisibility(View.GONE);
					}
				if (QUESTION.length() > 0) {
					rg.setVisibility(View.VISIBLE);
				} else {
					rg.setVisibility(View.GONE);
				}
				;
				ll_q.setVisibility(View.VISIBLE);
				MyFormat.setBitmap(GetRedPackage.this, ll, img,
						AppContext.getScreenWidth(),
						AppContext.getScreenWidth());
				head_tilte.setText(TITLE);

				tv_question.setText(QUESTION);
			
				changePosition();
				
				break;
			case 10:// 分享
				bitmap = (Bitmap) msg.obj;

				shareUrl(type);
				break;
			}
		};
	};
	  //重排序    
    public void changePosition() {    
        for(int index=SIZE-1; index>=0; index--) {    
            //从0到index处之间随机取一个值，跟index处的元素交换    
        
            exchange(random.nextInt(index+1), index);   
        }  
        rb1.setText(positions[0]);
        rb2.setText(positions[1]);
        rb3.setText(positions[2]);
        rb4.setText(positions[3]);
      
    }    
        
    //交换位置    
    private void exchange(int p1, int p2) {    
        String temp = positions[p1];    
        positions[p1] = positions[p2];    
        positions[p2] = temp;  //更好位置  
    } 
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.getredpackage);
		ViewUtils.inject(this);
		turn.setImageResource(R.drawable.threestagepage_return_yuan);
		if(getIntent().getExtras()!=null){
		adInfoId=getIntent().getStringExtra("adInfoId");
		Log.d("my", "getIntent:"+adInfoId);
		soudPool = new SoundPool(1, AudioManager.STREAM_MUSIC, 5);
		play=soudPool.load(this,R.raw.getmoney, 1);
		
		}
		comehere();
		init();
	}

	private void comehere() {
		XGPushClickedResult click = XGPushManager.onActivityStarted(this);
		if (click != null) {
			Log.d("my", "click"+click.toString());
			JSONObject obj;
			try {
				obj = new JSONObject(click.getCustomContent());
				if(obj.has("objectId")&&obj.get("objectId")!=null){
					
					adInfoId=obj.get("objectId").toString();
					Log.d("my", "adInfoId"+adInfoId);
				}else{finish();}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		
	}
	private void init() {
		if (!getIntent().getBooleanExtra("isDialog", false)) {
			
			
		}
		if(getIntent().getIntExtra("type", 0)==0){//等于零的时候没有红包,影藏部分布局
			rg.setVisibility(View.GONE);
			ll_pingjia.setVisibility(View.GONE);
			lll.setVisibility(View.GONE);
			
		}
		ll_red_hint.setVisibility(View.GONE);
		question.setText("关闭收藏");
		
		ll_q.setVisibility(View.GONE);
		rg.setOnCheckedChangeListener(this);
		getAdInfo();
		saveHistory();
		api = WXAPIFactory.createWXAPI(this,
				com.llg.privateproject.utils.Constants.APP_ID, true);
		api.registerApp(com.llg.privateproject.utils.Constants.APP_ID);
		head_tilte2
				.setImageResource(R.drawable.threestagepage_ellipsis_share);
		head_tilte2.setVisibility(View.VISIBLE);
		
		head_tilte.setText("");
		appContext = getAppContext();
		to_see.setVisibility(View.GONE);
		objectId = getIntent().getStringExtra("objectId");
		img = getIntent().getStringExtra("img");
		objectType = getIntent().getStringExtra("objectType");
		adForwardId = getIntent().getStringExtra("adForwardId");
		id = getIntent().getStringExtra("id");
		LayoutParams params = new LayoutParams(AppContext.getScreenWidth(),
				LayoutParams.WRAP_CONTENT);
		ll.setLayoutParams(params);
		MyFormat.setBitmap(this, ll, img, AppContext.getScreenWidth(),
				AppContext.getScreenWidth());

		if (objectId != null && objectId.length() > 5) {
			to_see.setVisibility(View.VISIBLE);
//			View view = findViewById(R.id.v);
//			view.setVisibility(View.VISIBLE);
		}
		// MyFormat.setBitmap(ProductDetailActivity.this,commenter_head,map.get("avatar").toString(),
		// 0,0);
		// setBitmap(ll, img);
		red_package_hint.setText("");
		red_package_hint.setTextColor(getMyColor(R.color.meihong));
		fgqqg.setText("");
		fgqqg.setTextColor(getMyColor(R.color.black3));
		fgqqg.setTextSize(getDimen(R.dimen.dimen_12sp) / 2);
		// v1.setVisibility(View.INVISIBLE);
		// v2.setVisibility(View.INVISIBLE);
		if (objectId == null || objectId.equals("null")) {
			to_see.setVisibility(View.GONE);
		}
		if (getIntent().getBooleanExtra("isDialog", false)) {
			new CountDownTimer(1000 * 5, 1000) {

				@Override
				public void onTick(long times) {
					// TODO Auto-generated method stub
					fgqqg.setTextColor(getResources().getColor(R.color.meihong));
					fgqqg.setText(times / 1000 + "s后关闭");
					// fgqqg.setTextColor(getResources().getColor(R.color.meihong));
					// fgqqg.setText(times / 1000 + "   一大波红包正在向你靠近...");

				}

				@Override
				public void onFinish() {
					// TODO Auto-generated method stub
					fgqqg.setText("");
					finish();
					// getRedPackage();
				}
			}.start();
		}
	}

	@OnClick({ R.id.turn, R.id.to_see1, R.id.more, R.id.answer,
			R.id.tv_comment, R.id.question ,R.id.ll})
	public void myClick(View v) {
		switch (v.getId()) {
		case R.id.question:// 隐藏页面
			saveAttentionAd();
			finish();
			break;
		case R.id.ll://
			if (appContext.isNetworkConnected()) {
				MyFormat.toSomeWhere(this, objectType, objectId, getIntent()
						.getStringExtra("forwardId"), getIntent()
						.getStringExtra("chain"));
				finish();
			} else {
				toast(R.string.t_Connection);
			}
			break;
		case R.id.turn:
			finish();
			break;
		case R.id.to_see1:
			if (appContext.isNetworkConnected()) {
				MyFormat.toSomeWhere(this, objectType, objectId, getIntent()
						.getStringExtra("forwardId"), getIntent()
						.getStringExtra("chain"));
				finish();
			} else {
				toast(R.string.t_Connection);
			}
			break;

		case R.id.more:// 分享
			if (appContext.isNetworkConnected()) {
				if (ellipticalsisWindow == null) {
					ellipticalsisWindow = new ProductDetailEllipsisPoPuWindow(
							this, this, 5, head_tilte2);
				}

				head_tilte2.setVisibility(View.VISIBLE);
				ellipticalsisWindow.showAsDropDown(head_tilte2);
			} else {
				toast(R.string.t_Connection);
			}
			break;
		case R.id.answer:// 获取红包,保存红包
			if (soudPool == null) {
				soudPool = new SoundPool(1, AudioManager.STREAM_MUSIC, 5);
			}
//			
//			soudPool.play(
//					soudPool.load(GetRedPackage.this, R.raw.beep, 1),
//					1, 1, 1, 1, 1);
			if (appContext.isNetworkConnected()) {
				saveAttentionAd();
				getRedPackage();
			} else {
				toast(R.string.t_Connection);
			}

			break;
		case R.id.tv_comment:// 提交评论
			if (appContext.isNetworkConnected()) {
				if (et_comment.length() < 1) {
					toast("亲,还没有评论内容哦!");
					return;
				} else {
					saveAdComment();
				}
			} else {
				toast(R.string.t_Connection);
			}
			break;

		}

	}

	/** 保存浏览广告记录 */
	private void saveHistory() {
		RequestParams params = new RequestParams();
		params.addBodyParameter("access_token", AppContext.getUserInformation()
				.getAccess_token());
		params.addBodyParameter("adInfoId",
				adInfoId);
		params.addHeader(MyFormat.HEADER_KEY, MyFormat.HEADER_VALUE);
		params.addQueryStringParameter("time",""+ System.currentTimeMillis());
		AppContext.getHtmlUitls().xUtilsm(this, HttpMethod.POST,
				"m/ad/saveHistory", params, new HttpCallback() {

					@Override
					public void onError(String msg) {
						// TODO Auto-generated method stub

					}

					@Override
					public void onBack(JSONObject json) {

					}
				});
	}

	/** 获取广告详情页面 */
	private void getAdInfo() {
		RequestParams params = new RequestParams();
		Log.d("my", "paramsadInfoId:"+adInfoId);
		params.addBodyParameter("adInfoId",
				adInfoId);
		params.addQueryStringParameter("time",""+ System.currentTimeMillis());
		AppContext.getHtmlUitls().xUtilsm(this, HttpMethod.POST,
				"common/ad/getAdInfo", params, new HttpCallback() {

					@Override
					public void onError(String msg) {
						// TODO Auto-generated method stub

					}

					@Override
					public void onBack(JSONObject json) {
						// TODO Auto-generated method stub
						Log.d("my", "guanggao" + json);
						try {
							if (json.getBoolean("success")) {
								JSONObject obj = json.getJSONObject("obj");
								positions[0] = obj.getString("ERROR_ANSWER1");
								positions[1] = obj.getString("ERROR_ANSWER2");
								positions[2] = obj.getString("ERROR_ANSWER3");
								positions[3] = obj
										.getString("CORRECT_ANSWER");
								CORRECT_ANSWER= obj
										.getString("CORRECT_ANSWER");
								QUESTION = obj.getString("QUESTION");
								TITLE = obj.getString("TITLE");
								img = obj.getString("IMAGE_URL");
								if(obj.get("OBJECT_ID")!=null){
								objectId = obj.getString("OBJECT_ID");}
								if(obj.get("OBJECT_TYPE")!=null){
									objectType = obj.getString("OBJECT_TYPE");}
								handler.sendEmptyMessage(4);
								adRedEnvelopId=obj.getString("AD_RED_ENVELOP_ID");
							}
						} catch (JSONException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				});
	}

	/** 收藏广告 */
	private void saveAttentionAd() {
		RequestParams params = new RequestParams();
		params.addBodyParameter("adInfoId",
				adInfoId);
		params.addBodyParameter("adForwardId",
				getIntent().getStringExtra("adForwardId"));
		params.addQueryStringParameter("access_token", AppContext
				.getUserInformation().getAccess_token());
		params.addQueryStringParameter("time",""+ System.currentTimeMillis());
		params.addHeader("X-Requested-With", "XMLHttpRequest");
		AppContext.getHtmlUitls().xUtilsm(this, HttpMethod.POST,
				"m/ad/saveAttentionAd", params, new HttpCallback() {

					@Override
					public void onError(String msg) {
						// TODO Auto-generated method stub

					}

					@Override
					public void onBack(JSONObject json) {
						// TODO Auto-generated method stub
						// myLogShow("my", "json:"+json);
					}
				});
	}

	/** 提交广告评论 */
	private void saveAdComment() {
		// GetProgressBar.getProgressBar(this);
		RequestParams params = new RequestParams();
		params.addQueryStringParameter("text", et_comment.getText().toString());// 评论内容

		params.addQueryStringParameter("adInfoId",
				adInfoId);// 广告id
		params.addQueryStringParameter("access_token", AppContext
				.getUserInformation().getAccess_token());
		params.addQueryStringParameter("time",""+ System.currentTimeMillis());
		params.addHeader(MyFormat.HEADER_KEY, MyFormat.HEADER_VALUE);
		AppContext.getHtmlUitls().xUtilsm(this, HttpMethod.GET,
				"m/ad/saveAdComment", params, new HttpCallback() {

					@Override
					public void onError(String msg) {
						// TODO Auto-generated method stub
					}

					@Override
					public void onBack(JSONObject json) {
						// TODO Auto-generated method stub
						try {
							if (json.getBoolean("success")) {
								toast("评论已提交");
								handler.sendEmptyMessage(3);
							} else {
								if (json.getString("errorCode").equals(
										MyFormat.NOT_LOGIN)) {
									toast(json.getString("msg"));
									setRefreshListtener(new Refresh() {
										@Override
										public void refreshRequst(
												String access_token) {
											// TODO Auto-generated method stub
											saveAdComment();
										}
									});
									RefeshToken();

								}
							}
						} catch (JSONException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				});
	}

	/** 转发广告 */
	private void doForwardAd() {
		// GetProgressBar.getProgressBar(this);
		RequestParams params = new RequestParams();
		params.addQueryStringParameter("parentId",
				getIntent().getStringExtra("adForwardId"));// 转发id

		params.addQueryStringParameter("adInfoId",
				adInfoId);// 广告id
		params.addQueryStringParameter("time",""+ System.currentTimeMillis());
		params.addQueryStringParameter("access_token",
				UserInformation.getAccess_token());
		params.addHeader(MyFormat.HEADER_KEY, MyFormat.HEADER_VALUE);
		AppContext.getHtmlUitls().xUtilsm(this, HttpMethod.GET,
				"m/ad/doForwardAd", params, new HttpCallback() {

					@Override
					public void onError(String msg) {
						// TODO Auto-generated method stub
					}

					@Override
					public void onBack(JSONObject json) {
						// TODO Auto-generated method stub
						try {
							if (json.getBoolean("success")) {
								toast("转发成功");
								// handler.sendEmptyMessage(3);
							} else {
								if (json.getString("errorCode").equals(
										MyFormat.NOT_LOGIN)) {
									toast(json.getString("msg"));
									// GetRedPackage.this
									// .startActivity(new Intent(
									// GetRedPackage.this,
									// WebLoginActivity.class));
									setRefreshListtener(new Refresh() {

										@Override
										public void refreshRequst(
												String access_token) {
											// TODO Auto-generated method stub
											doForwardAd();
										}
									});
									RefeshToken();
								}
							}
						} catch (JSONException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				});
	}

	/** 获取红包 */
	public void getRedPackage() {
		if (select_answer.length() > 0 && select_answer.equals(CORRECT_ANSWER)) {
		} else if (CORRECT_ANSWER.length() == 0) {

		} else {
			toast("答案有误");
			return;

		}
		RequestParams params = new RequestParams();
		params.addQueryStringParameter("time",""+ System.currentTimeMillis());
		params.addQueryStringParameter("answer", select_answer);
		params.addQueryStringParameter("access_token",
				UserInformation.getAccess_token());
//		if (getIntent().getStringExtra("adRedEnvelopId") != null) {
//			params.addQueryStringParameter("adredId",
//					getIntent().getStringExtra("adRedEnvelopId"));
//			
//			
//	
//		}else{
//		
//		}
		Log.d("my", "adRedEnvelopId:"+adRedEnvelopId);
		params.addQueryStringParameter("adredId",
				adRedEnvelopId);
	
		
		params.addHeader("X-Requested-With", "XMLHttpRequest");
		AppContext.getHtmlUitls().xUtilsm(this, HttpMethod.POST,
				"m/ad/getRedPackage", params, new HttpCallback() {

					@Override
					public void onError(String msg) {
						// TODO Auto-generated method stub
						handler.sendEmptyMessage(0);
					}

					@Override
					public void onBack(JSONObject json) {
						// TODO Auto-generated method stub
						Log.d("my", "" + json);
						try {
							if (json.getBoolean("success")) {
								if (json.getJSONObject("attributes")
										.getJSONObject("adRedEnvelopItem") != null) {
									if (json.getJSONObject("attributes")
											.getJSONObject("adRedEnvelopItem")
											.getString("co") != null
											&& json.getJSONObject("attributes")
													.getJSONObject(
															"adRedEnvelopItem")
													.getString("co").length() > 0) {

										co = json
												.getJSONObject("attributes")
												.getJSONObject(
														"adRedEnvelopItem")
												.getString("co");
									}
									if (json.getJSONObject("attributes")
											.getJSONObject("adRedEnvelopItem")
											.getString("money") != null
											&& json.getJSONObject("attributes")
													.getJSONObject(
															"adRedEnvelopItem")
													.getString("money")
													.length() > 0) {

										money = json
												.getJSONObject("attributes")
												.getJSONObject(
														"adRedEnvelopItem")
												.getString("money");
									}

								}
							} else {
								if (json.getString("errorCode").equals(
										MyFormat.NOT_LOGIN)) {
									toast(json.getString("msg"));
									// GetRedPackage.this
									// .startActivity(new Intent(
									// GetRedPackage.this,
									// WebLoginActivity.class));
									setRefreshListtener(new Refresh() {

										@Override
										public void refreshRequst(
												String access_token) {
											// TODO Auto-generated method stub
											getRedPackage();
										}
									});
									RefeshToken();

								}
								toast(json.getString("msg"));
								// mesg = json.getString("msg");

							}
							handler.sendEmptyMessage(1);
						} catch (JSONException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				});
	}

	private SaveImg saveImg;

	/**
	 * url
	 * 
	 * @param type
	 *            :1 微信,2朋友圈
	 */
	private void shareUrl(int type) {

		WXWebpageObject webpage = new WXWebpageObject();
//		webpage.webpageUrl = "http://www.fgqqg.com";
		webpage.webpageUrl =getResources().getString(R.string.buyserver)+"m/ad?id="
+adInfoId+"&shareCusId="+AppContext.userid;
;
Log.d("my", "分享:"+getResources().getString(R.string.buyserver)+"m/ad?id="
+adInfoId+"&shareCusId="+AppContext.userid);
		WXMediaMessage msg = new WXMediaMessage(webpage);
		msg.title = TITLE;
		msg.description = TITLE;
		// Bitmap thumb = BitmapFactory.decodeResource(getResources(),
		// R.drawable.dengluzhuce_logo);
		Bitmap bmp =null;
		BitmapUtils bu = new BitmapUtils(this);

		try {
			bmp = BitmapFactory.decodeStream(new URL(img).openStream());
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// Bitmap thumb = compressionBitmap(
		// BitmapGlobalConfig.getInstance(this,
		// CommonUtils.createSDCardDir()).getBitmapCache().getBitmapFromDiskCache(img,new
		// BitmapDisplayConfig ()));

		msg.thumbData = com.llg.help.Util.bmpToByteArray(
				compressionBitmap(bitmap), true);

		SendMessageToWX.Req req = new SendMessageToWX.Req();
		req.transaction = buildTransaction("webpage");
		req.message = msg;
		if (type == 1) {
			req.scene = SendMessageToWX.Req.WXSceneSession;
		} else if (type == 2) {
			req.scene = SendMessageToWX.Req.WXSceneTimeline;
		}
		// req.scene = isTimelineCb.isChecked() ?
		// SendMessageToWX.Req.WXSceneTimeline :
		// SendMessageToWX.Req.WXSceneSession;
		boolean reqd = api.sendReq(req);
		Log.d("my", "api.sendReq(req)" + reqd);
		// finish();
	}

	/** 剪裁图片 */
	private Bitmap compressionBitmap(Bitmap bitmap) {
		int wid = 1;
		int hei = 1;
		int newWid = 100;
		int newHei = 100;
		if (bitmap != null) {
			wid = bitmap.getWidth();
			hei = bitmap.getHeight();

		}
		// 设置缩放比
		float scaleW = (float) newWid / wid;
		float scaleH = (float) newHei / hei;
		// 取得要想缩放的matrix参数
		Matrix matrix = new Matrix();
		matrix.postScale(scaleW, scaleH);
		Bitmap newBitmap = Bitmap.createBitmap(bitmap, 0, 0, wid, hei, matrix,
				true);

		return newBitmap;
	}

	private String buildTransaction(final String type) {
		return (type == null) ? String.valueOf(System.currentTimeMillis())
				: type + System.currentTimeMillis();
	}

	private Bitmap bitmap;
	private int type;

	@Override
	public void setMessage(String message, int type) {
		// TODO Auto-generated method stub

		if (message.equals("分享到朋友圈")) {
			toast(message);
			if (saveImg == null) {
				saveImg = new SaveImg(img, handler, bitmap, this);
			}
			this.type = type = 2;
			// shareUrl(2);
		} else if (message.equals("分享给微信好友")) {
			if (saveImg == null) {
				saveImg = new SaveImg(img, handler, bitmap, this);
			}
			this.type = type = 1;
			toast(message);
			// shareUrl(1);
		} else if (message.equals("转发为我的广告")) {
			doForwardAd();
		}
	}

	@Override
	public void onCheckedChanged(RadioGroup group, int checkedId) {
		// TODO Auto-generated method stub
		switch (checkedId) {
		case R.id.tb1:
			select_answer = rb1.getText().toString();
			break;
		case R.id.tb2:
			select_answer = rb2.getText().toString();

			break;
		case R.id.tb3:
			select_answer = rb3.getText().toString();

			break;
		case R.id.tb4:
			select_answer = rb4.getText().toString();

			break;

		default:
			break;
		}

	}

}
