package com.llg.privateproject.view;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;

import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.llg.help.DataEntity;
import com.llg.help.SetListHeigt;
import com.bjg.lcc.jsonparser.ParseJson;
import com.bjg.lcc.privateproject.R;
import com.llg.privateproject.AppContext;
import com.llg.privateproject.actvity.CommodityActivity;
import com.llg.privateproject.actvity.PutAdvertisementAty;
import com.llg.privateproject.adapters.DateAdapter;
import com.llg.privateproject.adapters.PreferentialAdapter;
import com.llg.privateproject.adapters.ThreeRegionAdapter;
import com.llg.privateproject.entities.ThreeRegion;
import com.llg.privateproject.html.AndroidCallBack.HttpCallback;
import com.smartandroid.sa.view.AutoLoading;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.LayoutParams;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

/**
 * 修改个人资料对话框 yh 2015.6.13
 * */
public class Gerenziliao_Dialog extends Dialog implements
		android.view.View.OnClickListener, OnCheckedChangeListener,
		OnItemClickListener {
	Context context;
	int type;

	/** 店铺一级分类 */
	private List<String> listShop1 = null;
	/** 店铺二级分类 */
	private List<String> listShop2 = null;
	/** 店铺一级分类listView */
	private ListView lv1 = null;
	/** 店铺二级分类listView */
	private ListView lv2 = null;
	/** 店铺一级分类适配器 */
	private ArrayAdapter<String> lv1Adapter;
	/** 店铺二级分类适配器 */
	private ArrayAdapter<String> lv2Adapter;
	/** 店铺一级分类 */
	private String shop1 = "";
	/** 店铺二级分类 */
	private String shop2 = "";
	/** 城市列表 */
	private List<ThreeRegion> list = null;
	/** 城市列表ListView */
	private ListView lv_city;
	/** 区域列表ListView */
	private ListView lv_area;
	/** 街道列表ListView */
	private ListView lv_street;
	/** 地址 */
	private TextView address;
	/** 地址列表适配器 */
	private ThreeRegionAdapter addressAdapter;
	/** 设置区域监听 */
	private AreaListener areaListener;
	/** 监听选择配送时间和支付方式 */
	private PostTimeListener postTimelistener;
	/** 设置发票类型、发票开头 */
	private InvoiceListener invoiceListener;
	/** 配送时间 */
	private String postTime = "时间不限";
	/** 网上支付 */
	private String payment = "网上支付";
	/** 发票开头，默认为不开 */
	private String invoiceHead = "不开发票";
	/** 发票类别名 */
	private String invoiceCategory = "";
	/** 发票类别 */
	private String invoiceType = "";
	/** 添加发票开头 */
	private EditText addinvoice_head;
	/** 发票开头分组RadioGroup */
	private RadioGroup rg_invoice;
	/** 发票类别RadioGroup */
	private RadioGroup rg_invoicecategory;
	private LinearLayout lyLoad;
	private AutoLoading autoLoading;
	private String cityId = 0 + "";
	private ListView lvProvince;
	private OnDeleteListener deleteListener;
	private String msg;

	/** 设置区域监听 */
	public interface AreaListener {
		/** 设置区域 */
		public void setAddress(String area, String zone);
	}

	/** 监听选择配送时间和支付方式 */
	public interface PostTimeListener {
		public void setPosttimeandPayment(String postTime, String payment);
	}

	/** 设置开发票类型 */
	public interface InvoiceListener {

		public void setInvoice(String invoiceHead, String companyName,
				String invoiceType);

	}

	/** 设置优惠方式 */
	PreferentialListener preferentialListener;

	public interface PreferentialListener {
		public void setPreferential(String coin, String voucher);
	}

	/** 店铺分类接口 */
	private DianpufenleiListener dianpufenleiListener = null;

	/** 店铺分类接口 */
	public interface DianpufenleiListener {
		public void setDianpufenlei(String one, String two);

	}

	/** co币优惠额 */
	private String coin = "";
	/** 优惠券 */
	private String voucher = "";
	/** 优惠券列表 */
	private List<Map<String, Object>> list_preferntial;
	/** 优惠券列表适配器 */
	private PreferentialAdapter preferentialAdapter;

	/**
	 * @param type
	 *            ：1 上传头像对话框 ， 2 修改昵称对话框 ，3 修改性别对话框 ， 4 修改生日对话框 ，5 删除地址对话框 ，6
	 *            选择地址对话框 ,7配送时间、支付方式
	 * */
	public Gerenziliao_Dialog(Context context, int type) {
		super(context, R.style.agreemdialog);
		// TODO Auto-generated constructor stub
		this.context = context;
		this.type = type;
	}

	public Gerenziliao_Dialog(Context context, int type, String msg) {
		super(context, R.style.agreemdialog);
		// TODO Auto-generated constructor stub
		this.context = context;
		this.type = type;
		this.msg = msg;
	}

	/**
	 * @param type
	 *            6 选择地址对话框
	 * */
	public Gerenziliao_Dialog(Context context, int type,
			AreaListener areaListener) {
		super(context, R.style.agreemdialog);
		// TODO Auto-generated constructor stub
		this.context = context;
		this.type = type;
		this.areaListener = areaListener;
	}

	/**
	 * @param type
	 *            ：7配送时间、支付方式
	 * */
	public Gerenziliao_Dialog(Context context, int type,
			PostTimeListener postTimelistener) {
		super(context, R.style.agreemdialog);
		// TODO Auto-generated constructor stub
		this.context = context;
		this.type = type;
		this.postTimelistener = postTimelistener;
	}

	/**
	 * @param type
	 *            ：8 设置发票开头、类别
	 * */
	public Gerenziliao_Dialog(Context context, int type,
			InvoiceListener invoiceListener) {
		super(context, R.style.agreemdialog);
		// TODO Auto-generated constructor stub
		this.context = context;
		this.type = type;
		this.invoiceListener = invoiceListener;

	}

	/**
	 * @param type
	 *            ：9 优惠方式 co币、优惠
	 * */
	public Gerenziliao_Dialog(Context context, int type,
			PreferentialListener preferentialListener) {
		super(context, R.style.agreemdialog);
		// TODO Auto-generated constructor stub
		this.context = context;
		this.type = type;
		this.preferentialListener = preferentialListener;

	}

	/**
	 * @param type
	 *            ：10 店铺分类、一级、二级
	 * */
	public Gerenziliao_Dialog(Context context, int type,
			DianpufenleiListener dianpufenleiListener) {
		super(context, R.style.agreemdialog);
		// TODO Auto-generated constructor stub
		this.context = context;
		this.type = type;
		this.dianpufenleiListener = dianpufenleiListener;

	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		switch (type) {
		case 1:
			initHead();
			break;
		case 2:
			editUsername();
			break;
		case 3:
			editSex();
			break;
		case 4:
			editBirthday();
			break;
		case 5:
			deleteAddress();
			break;
		case 6:
			selectAddress();
			break;
		case 7:
			selectPosttime();
			break;
		case 8:
			setInvoice();
			break;
		case 9:
			setPereferential();
			break;
		case 10:
			dianpufenlei();
			break;

		default:
			break;
		}

		setCanceledOnTouchOutside(false);
	}

	/*** 上传头像 */
	void initHead() {
		setContentView(R.layout.gerenziliao_shangchuantouxiang);
		ImageView turn = (ImageView) findViewById(R.id.turn);
		TextView bendishangchuan = (TextView) findViewById(R.id.bendishangchuan);
		TextView paizhaoshangchuan = (TextView) findViewById(R.id.paizhaoshangchuan);
		turn.setOnClickListener(this);
		bendishangchuan.setOnClickListener(this);
		paizhaoshangchuan.setOnClickListener(this);

	}

	/*** 修改昵称 */
	void editUsername() {
		setContentView(R.layout.gerenziliao_yonghuming);
		ImageView turn = (ImageView) findViewById(R.id.turn);
		EditText et_username = (EditText) findViewById(R.id.et_username);
		et_username.setHintTextColor(context.getResources().getColor(
				R.color.black3));
		TextView d_commit = (TextView) findViewById(R.id.d_commit);
		turn.setOnClickListener(this);
		et_username.setOnClickListener(this);
		d_commit.setOnClickListener(this);

	}

	/*** 修改性别 */
	void editSex() {
		setContentView(R.layout.gerenziliao_sex);
		ImageView turn = (ImageView) findViewById(R.id.turn);
		RadioGroup rg = (RadioGroup) findViewById(R.id.rg);
		turn.setOnClickListener(this);
		rg.setOnCheckedChangeListener(this);

	}

	/***
	 * 删除地址
	 * */
	void deleteAddress() {
		setContentView(R.layout.deleteaddress_dialog);
		RelativeLayout turn = (RelativeLayout) findViewById(R.id.turn);
		RelativeLayout delete = (RelativeLayout) findViewById(R.id.rl_delete);
		TextView tvDelete = (TextView) findViewById(R.id.tv_delete);
		if (msg!=null) {
		tvDelete.setText(msg);
		}
		turn.setOnClickListener(this);
		delete.setOnClickListener(this);
	}

	/***
	 * 选择城市、区域、街道
	 * */
	void selectAddress() {
		setContentView(R.layout.address_select);
		ImageView turn = (ImageView) findViewById(R.id.turn);
		TextView title = (TextView) findViewById(R.id.head_tilte);
		lyLoad = (LinearLayout) findViewById(R.id.ly_load);
		autoLoading = new AutoLoading(context, lyLoad);
		autoLoading.showLoadingLayout();
		requestCity();
		title.setText("选择地址");
		turn.setOnClickListener(this);

		address = (TextView) findViewById(R.id.address);
		lv_city = (ListView) findViewById(R.id.lv_city);
		lv_area = (ListView) findViewById(R.id.lv_area);
		lv_street = (ListView) findViewById(R.id.lv_street);
		lvProvince = (ListView) findViewById(R.id.lv_province);

		list = new ArrayList<ThreeRegion>();
		lv_city.setVisibility(View.GONE);
		lv_area.setVisibility(View.GONE);
		lv_street.setVisibility(View.GONE);
		lvProvince.setVisibility(View.VISIBLE);
		addressAdapter = new ThreeRegionAdapter(context, list);
		lv_city.setAdapter(addressAdapter);
		lv_area.setAdapter(addressAdapter);
		lv_street.setAdapter(addressAdapter);
		lvProvince.setAdapter(addressAdapter);
		lv_city.setOnItemClickListener(this);
		lv_area.setOnItemClickListener(this);
		lv_street.setOnItemClickListener(this);
		lvProvince.setOnItemClickListener(this);

	}

	/***
	 * 选择配送时间，付款方式
	 * */
	void selectPosttime() {
		setContentView(R.layout.posttime);
		ImageView turn = (ImageView) findViewById(R.id.turn);
		TextView title = (TextView) findViewById(R.id.head_tilte);
		TextView confirm = (TextView) findViewById(R.id.confirm);
		RadioGroup rg_posttime = (RadioGroup) findViewById(R.id.rg_posttime);
		RadioGroup rg_pay = (RadioGroup) findViewById(R.id.rg_pay);
		title.setText("配送时间/付款方式");
		turn.setOnClickListener(this);
		confirm.setOnClickListener(this);
		rg_posttime.setOnCheckedChangeListener(this);
		rg_pay.setOnCheckedChangeListener(this);

	}

	/***
	 * 开具发票
	 * */
	void setInvoice() {
		setContentView(R.layout.invoice);
		ImageView turn = (ImageView) findViewById(R.id.turn);
		ImageView add_head = (ImageView) findViewById(R.id.add_head);
		TextView title = (TextView) findViewById(R.id.head_tilte);
		TextView confirm = (TextView) findViewById(R.id.confirm);
		addinvoice_head = (EditText) findViewById(R.id.addinvoice_head);
		rg_invoice = (RadioGroup) findViewById(R.id.rg_invoice);
		rg_invoicecategory = (RadioGroup) findViewById(R.id.rg_invoicecategory);
		for (int i = 0; i < 3; i++) {
			RadioButton rb = new RadioButton(context);
			// if(i==0){
			// rb.setChecked(true);
			// }
			if (i == 0)
				rb.setText("不需要发票");
			rb.setTag("0");
			if (i == 1)
				rb.setText("个人");
			rb.setTag("1");
			if (i == 2)
				rb.setText("公司");
			rb.setTag("2");

			rb.setButtonDrawable(R.drawable.cb_gouwuche);
			rb.setPadding(10, 20, 10, 20);
			rb.setTextColor(context.getResources().getColor(R.color.black2));
			LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT,
					LayoutParams.WRAP_CONTENT);
			lp.setMargins(35, 0, 0, 0);
			View view = new View(context);
			view.setTag(view);
			view.setBackgroundResource(R.drawable.dian_line_product_e8);
			LayoutParams lpv = new LayoutParams(LayoutParams.MATCH_PARENT, 4);
			rg_invoicecategory.addView(rb, lp);
			rg_invoicecategory.addView(view, lpv);
		}
		title.setText("开具发票");
		add_head.setOnClickListener(this);
		turn.setOnClickListener(this);
		confirm.setOnClickListener(this);
		addinvoice_head.setOnClickListener(this);
		rg_invoice.setOnCheckedChangeListener(this);
		rg_invoicecategory.setOnCheckedChangeListener(this);

	}

	/** 设置优惠方式 */
	private void setPereferential() {
		setContentView(R.layout.order_preferential);
		ScrollView sv = (ScrollView) findViewById(R.id.sv);
		CheckBox cb_co = (CheckBox) findViewById(R.id.cb_co);
		ImageView turn = (ImageView) findViewById(R.id.turn);
		MyListView lv = (MyListView) findViewById(R.id.lv_);
		TextView title = (TextView) findViewById(R.id.head_tilte);
		TextView myco = (TextView) findViewById(R.id.myco);
		final TextView usable = (TextView) findViewById(R.id.usable);
		myco.setText("我的CO币:55");
		usable.setText("5");
		cb_co.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				// TODO Auto-generated method stub
				if (isChecked) {
					usable.setText("5");
				} else {
					usable.setText("");
				}
				coin = usable.getText().toString();
			}

		});
		coin = usable.getText().toString();
		TextView confirm = (TextView) findViewById(R.id.confirm);
		list_preferntial = new ArrayList<Map<String, Object>>();
		preferentialAdapter = new PreferentialAdapter(context, list_preferntial);
		lv.setAdapter(preferentialAdapter);
		turn.setOnClickListener(this);
		confirm.setOnClickListener(this);
		title.setText("优惠方式");
		for (int i = 0; i < 15; i++) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("man", "300" + i);
			map.put("sheng", "100" + i);
			list_preferntial.add(map);
		}

		sv.smoothScrollTo(0, 0);
		preferentialAdapter.notifyDataSetChanged();
		lv.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				TextView sheng = (TextView) parent.getChildAt(position)
						.findViewById(R.id.sheng);
				// Log.d("my", "sheng"+sheng);
				// Log.d("my", "voucher"+voucher);
				voucher = sheng.getText().toString();

				// ImageView iv=(ImageView) view.findViewById(R.id.iv_checked);
				preferentialAdapter.setSelectitem(position);
			}
		});

	}

	/** 店铺分类 */
	private void dianpufenlei() {
		setContentView(R.layout.shop_baobeifenlei);
		ImageView turn = (ImageView) findViewById(R.id.turn);
		TextView title = (TextView) findViewById(R.id.head_tilte);
		lv1 = (ListView) findViewById(R.id.lv1);
		lv2 = (ListView) findViewById(R.id.lv2);
		listShop1 = new ArrayList<String>();
		listShop2 = new ArrayList<String>();
		lv1Adapter = new ArrayAdapter<String>(context,
				R.layout.shop_baobeifenlei_item, listShop1);
		lv2Adapter = new ArrayAdapter<String>(context,
				R.layout.shop_baobeifenlei_item, listShop2);
		lv1.setAdapter(lv1Adapter);
		lv2.setAdapter(lv2Adapter);
		title.setText("宝贝分类");

		for (int i = 0; i < 5; i++) {
			listShop1.add("一级分类" + i);

		}
		lv1Adapter.notifyDataSetChanged();

		turn.setOnClickListener(this);
		lv1.setOnItemClickListener(this);
		lv2.setOnItemClickListener(this);
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.turn:// 返回
			cancel();
			break;
		case R.id.bendishangchuan:// 本地上传
			Toast.makeText(context, "本地上传", Toast.LENGTH_SHORT).show();
			break;
		case R.id.paizhaoshangchuan:// 拍照上传
			Toast.makeText(context, "拍照上传", Toast.LENGTH_SHORT).show();

			break;
		case R.id.et_username:// 编辑用户名
			Toast.makeText(context, "编辑用户名", Toast.LENGTH_SHORT).show();

			break;
		case R.id.d_commit:// 提交用户名
			Toast.makeText(context, "提交用户名", Toast.LENGTH_SHORT).show();

			break;
		case R.id.rl_delete:// 删除
			deleteListener.deleteAddress();
			Toast.makeText(context, "删除", Toast.LENGTH_SHORT).show();

			break;
		case R.id.confirm:// 确认配送时间/发票开头
			if (postTimelistener != null) {
				postTimelistener.setPosttimeandPayment(postTime, payment);

			}
			if (invoiceListener != null)
				if (invoiceCategory.length() > 1) {
					invoiceListener.setInvoice(invoiceHead, invoiceCategory,
							invoiceType);
				} else {
					Toast.makeText(context, "发票类型不能为空", Toast.LENGTH_SHORT)
							.show();
					return;
				}

			if (preferentialListener != null)
				preferentialListener.setPreferential(coin, voucher);
			;
			Toast.makeText(context, "确定", Toast.LENGTH_SHORT).show();
			cancel();
			break;
		case R.id.add_head:
			if (addinvoice_head != null
					&& addinvoice_head.getText().toString().length() < 1) {

				Toast.makeText(context, "请输入新增发票开头", Toast.LENGTH_SHORT).show();
			} else if (addinvoice_head != null && rg_invoice != null) {
				boolean isExist = false;
				for (int i = 0; i < rg_invoice.getChildCount(); i++) {
					if (rg_invoice.getChildAt(i).getTag().toString()
							.equals(addinvoice_head.getText().toString())) {
						Toast.makeText(context,
								"已存在" + addinvoice_head.getText().toString(),
								Toast.LENGTH_SHORT).show();
						isExist = true;
						addinvoice_head.setText("");
						break;
					}
				}
				if (!isExist) {
					RadioButton rb = new RadioButton(context);
					rb.setText(addinvoice_head.getText().toString());
					rb.setTextColor(context.getResources().getColor(
							R.color.black2));

					rb.setButtonDrawable(R.drawable.cb_gouwuche);
					rb.setTag(addinvoice_head.getText().toString());
					rb.setPadding(10, 20, 10, 20);

					// rb.setCompoundDrawablesWithIntrinsicBounds(5, 0, 0, 0);
					rb.setTextColor(context.getResources().getColor(
							R.color.black2));
					LayoutParams lp = new LayoutParams(
							LayoutParams.MATCH_PARENT,
							LayoutParams.WRAP_CONTENT);

					lp.setMargins(35, 0, 0, 0);
					View view = new View(context);
					view.setTag(view);
					view.setBackgroundResource(R.drawable.dian_line_product_e8);
					LayoutParams lpv = new LayoutParams(
							LayoutParams.MATCH_PARENT, 4);
					rg_invoice.addView(rb, lp);
					rg_invoice.addView(view, lpv);
					addinvoice_head.setText("");
				}

			}
			break;

		default:
			break;
		}
	}

	public interface OnDeleteListener {
		void deleteAddress();
	}

	public void setOnDeleteListener(OnDeleteListener deleteListener) {
		this.deleteListener = deleteListener;
	}

	/**
	 * 选择城市
	 */
	private void requestCity() {
		RequestParams params = new RequestParams();
		params.addQueryStringParameter("pid", cityId);// 图片ID
		AppContext.getHtmlUitls().xUtils(context, HttpMethod.POST,
				"region/getRegion", params, new HttpCallback() {

					@Override
					public void onError(String msg) {
						// TODO Auto-generated method stub
						autoLoading.hideAll();
						Log.i("tag", msg + "----------msg------");
					}

					@Override
					public void onBack(JSONObject json) {
						// TODO Auto-generated method stub
						Map<String, Object> map = ParseJson.getParseJson()
								.parseIsSuccess(json);
						Log.i("tag", json + "--------json------");
						Toast.makeText(context,
								map.get("isSuccess") + "issuccess ",
								Toast.LENGTH_SHORT).show();
						if ((Boolean) map.get("isSuccess")) {
							list = ParseJson.getParseJson().parseThreeRegion(
									json);
							if (list != null && list.size() > 0) {
								addressAdapter.setList(list);
							}
							autoLoading.hideAll();
						}
					}
				});
	}

	@Override
	public void onCheckedChanged(RadioGroup group, int id) {
		// TODO Auto-generated method stub
		switch (group.getId()) {
		case R.id.rg_invoice:// 设置发票开头
			RadioButton rb = (RadioButton) findViewById(id);
			invoiceHead = rb.getText().toString();

			break;
		case R.id.rg_invoicecategory:// 设置发票分类

			RadioButton rb1 = (RadioButton) findViewById(id);
			invoiceCategory = rb1.getText().toString();
			invoiceType = (String) rb1.getTag();
			break;

		default:
			break;
		}

		switch (id) {
		case R.id.boy:// 男
			Toast.makeText(context, "boy", Toast.LENGTH_SHORT).show();
			break;
		case R.id.girl:// 女
			Toast.makeText(context, "girl", Toast.LENGTH_SHORT).show();
			break;
		case R.id.secret:// 保密
			Toast.makeText(context, "secret", Toast.LENGTH_SHORT).show();
			break;
		case R.id.alltime:// 时间不限
			postTime = "时间不限";
			Toast.makeText(context, "alltime", Toast.LENGTH_SHORT).show();
			break;
		case R.id.worktime:// 工作日
			postTime = "只工作日送货";
			Toast.makeText(context, "worktime", Toast.LENGTH_SHORT).show();
			break;
		case R.id.holiday:// 休息日
			postTime = "只双休日、假日送货";
			Toast.makeText(context, "holiday", Toast.LENGTH_SHORT).show();
			break;
		case R.id.online_pay:// 网上支付
			payment = "网上支付";
			Toast.makeText(context, "online_pay", Toast.LENGTH_SHORT).show();
			break;
		// case R.id.add_head:// 添加发票开头
		//
		// Toast.makeText(context, "添加发票开头", Toast.LENGTH_SHORT).show();
		// break;

		default:
			break;
		}
	}

	/** 修改生日 */
	@SuppressLint("NewApi")
	void editBirthday() {
		setContentView(R.layout.gerenziliao_datedialog);
		Calendar c = Calendar.getInstance();
		final ListView lv_year = (ListView) findViewById(R.id.lv_year);
		ListView lv_month = (ListView) findViewById(R.id.lv_month);
		ListView lv_day = (ListView) findViewById(R.id.lv_day);
		// List<String> listy=new ArrayList<String>();
		// String year[]=new String[100];
		// String
		// month[]={"01","02","03","04","05","06","07","08","09","10","11","12"};
		// String day[]=null;
		// String
		// day_28[]={"01","02","03","04","05","06","07","08","09","10","11","12","13","14"
		// ,"15","16","17","18","19","20","21","22","23","24","25","26","27","28"};
		// String
		// day_29[]={"01","02","03","04","05","06","07","08","09","10","11","12","13","14"
		// ,"15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"};
		// String
		// day_30[]={"01","02","03","04","05","06","07","08","09","10","11","12","13","14"
		// ,"15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30"};
		// String
		// day_31[]={"01","02","03","04","05","06","07","08","09","10","11","12","13","14"
		// ,"15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"};
		final List<DataEntity> years = new ArrayList<DataEntity>();
		List<DataEntity> months = new ArrayList<DataEntity>();
		List<DataEntity> days = new ArrayList<DataEntity>();
		for (int i = 0; i < 100; i++) {
			// year[i]=(c.get(Calendar.YEAR)-99+i)+"";
			DataEntity d = new DataEntity();
			d.data = (c.get(Calendar.YEAR) - 99 + i) + "";
			years.add(d);
		}
		for (int i = 1; i < 13; i++) {
			DataEntity d = new DataEntity();
			if (i < 10) {
				d.data = ("0" + i);
				months.add(d);
			} else {
				d.data = ("" + i);
				months.add(d);
			}
		}
		for (int i = 1; i < 32; i++) {
			DataEntity d = new DataEntity();
			if (i < 10) {
				d.data = ("0" + i);
				days.add(d);
			} else {
				d.data = ("" + i);
				days.add(d);
			}
		}

		// day=day_31;
		// lv_year.setAdapter(new ArrayAdapter<String>(context,
		// R.layout.date_item, R.id.date_item,year));
		// lv_month.setAdapter(new
		// ArrayAdapter<String>(context,R.layout.date_item,R.id.date_item,
		// month));
		// lv_day.setAdapter(new ArrayAdapter<String>(context,
		// R.layout.date_item,R.id.date_item, day));
		final DateAdapter yadapter = new DateAdapter(context, years);
		lv_year.setAdapter(yadapter);
		final DateAdapter madapter = new DateAdapter(context, months);
		lv_month.setAdapter(madapter);
		DateAdapter dadapter = new DateAdapter(context, days);
		lv_day.setAdapter(dadapter);
		SetListHeigt setHeigt = new SetListHeigt();
		setHeigt.setThreeitemHeight(lv_year);
		setHeigt.setThreeitemHeight(lv_month);
		setHeigt.setThreeitemHeight(lv_day);
		//lv_year.scrollListBy(69);
		lv_year.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				DataEntity v = years.get(position);
				for (int i = 0; i < parent.getCount(); i++) {

					if (i != position) {
						// parent.getChildAt(i).setBackgroundColor(context.getResources().getColor(R.color.black));
						// Log.d("my",
						// i+"lv_year.getChildAt(i)"+lv_year.getChildAt(i));
						// yadapter.getView(i, v,
						// parent).setBackgroundColor(context.getResources().getColor(R.color.black));
						// lv_year.getChildAt(i).setBackgroundColor(context.getResources().getColor(R.color.black));
					} else {
						// Log.d("my", "parent.getCount()"+parent.getCount());
						// yadapter.getView(i, v,
						// parent).setBackgroundColor(context.getResources().getColor(R.color.orange1));
						// parent.getChildAt(i).setBackgroundColor(context.getResources().getColor(R.color.orange1));
					}
					lv_year.getChildAt(position).setBackgroundColor(
							context.getResources().getColor(R.color.black));

				}
				yadapter.notifyDataSetChanged();
			}
		});
		lv_month.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View v,
					int position, long id) {
				// TODO Auto-generated method stub
				for (int i = 0; i < parent.getCount(); i++) {
					;
					if (v == parent.getChildAt(i)) {
						v.setBackgroundColor(context.getResources().getColor(
								R.color.orange3));
						// Log.d("my", ""+position);

					} else {
						// Log.d("my", "parent.getCount()"+parent.getCount());
						v.setBackgroundColor(context.getResources().getColor(
								R.color.white));
					}

				}
				madapter.notifyDataSetChanged();

			}
		});
		lv_day.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub

			}
		});
	}

	@SuppressLint("ResourceAsColor")
	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		// TODO Auto-generated method stub
		switch (parent.getId()) {
		case R.id.lv_city:// 城市列表
			autoLoading.showLoadingLayout();
			cityId = list.get(position).getId();
			Log.i("tag", cityId + "---------1级城市ID");
			Log.i("tag", list.get(position).getParentId() + "---------1级城市父亲ID");
			requestCity();
			// address.setText(list.get(position).getName());
			address.setText(list.get(position).getFullName());
			list.clear();
			lv_city.setVisibility(View.GONE);
			lv_area.setVisibility(View.VISIBLE);
			lv_street.setVisibility(View.GONE);
			addressAdapter.notifyDataSetChanged();
			break;
		case R.id.lv_area:// 区域列表
			autoLoading.showLoadingLayout();
			cityId = list.get(position).getId();
			address.setText(list.get(position).getFullName());
			Log.i("tag", position + "---------2级position");
			Log.i("tag", list.get(position).getParentId() + "---------2级城市父亲ID");
			Log.i("tag", cityId + "---------2级城市ID");
			requestCity();
			lv_city.setVisibility(View.GONE);
			lv_area.setVisibility(View.GONE);
			lv_street.setVisibility(View.VISIBLE);
			lvProvince.setVisibility(View.GONE);
			addressAdapter.notifyDataSetChanged();
			break;
		case R.id.lv_street:// 街道列表
			address.setText(list.get(position).getFullName());
			if (areaListener != null)
				areaListener.setAddress(address.getText().toString(),
						list.get(position).getId());
			cancel();
			break;
		case R.id.lv_province:// 省份列表
			autoLoading.showLoadingLayout();
			cityId = list.get(position).getId();
			requestCity();
			lv_city.setVisibility(View.VISIBLE);
			lv_area.setVisibility(View.GONE);
			lv_street.setVisibility(View.GONE);
			lvProvince.setVisibility(View.GONE);
			break;
		case R.id.lv1:// 店铺一级分类列表
			for (int i = 0; i < parent.getCount(); i++) {
				if (parent.getChildAt(i) == view) {
					TextView tv = (TextView) view;
					Drawable drawable = context.getResources().getDrawable(
							R.drawable.erji_xiafan_yellow);
					drawable.setBounds(0, 0, drawable.getMinimumWidth(),
							drawable.getMinimumHeight());
					tv.setCompoundDrawables(null, null, drawable, null);
					tv.setTextColor(context.getResources().getColor(
							R.color.orange1));

				} else if (parent.getChildAt(i) != null) {
					TextView tv = (TextView) parent.getChildAt(i);
					Drawable drawable = context.getResources().getDrawable(
							R.drawable.threestagepage_baobeifenlei_xiafan);
					drawable.setBounds(0, 0, drawable.getMinimumWidth(),
							drawable.getMinimumHeight());
					tv.setCompoundDrawables(null, null, drawable, null);
					tv.setTextColor(context.getResources().getColor(
							R.color.black2));
				}
			}
			listShop2.clear();
			for (int j = 0; j < 9; j++) {
				listShop2.add("二级分类" + j);
			}
			lv2Adapter.notifyDataSetChanged();
			if (dianpufenleiListener != null) {
				shop1 = listShop1.get(position);
				if (listShop2.size() < 1) {
					dianpufenleiListener.setDianpufenlei(shop1, shop2);
					lv2.setVisibility(View.GONE);
					Intent intent = new Intent(context, CommodityActivity.class);
					// intent.putExtra("parentId", parentId);
					// startActivity(intent);
					context.startActivity(intent);
					cancel();
				} else if (listShop2.size() > 0) {
					lv2.setVisibility(View.VISIBLE);
					dianpufenleiListener.setDianpufenlei(shop1, shop2);
				}
			}
			break;
		case R.id.lv2:// 店铺二级分类列表
			if (dianpufenleiListener != null) {
				shop2 = listShop2.get(position);
				dianpufenleiListener.setDianpufenlei(shop1, shop2);
				Intent intent = new Intent(context, CommodityActivity.class);
				// intent.putExtra("parentId", parentId);
				// startActivity(intent);
				context.startActivity(intent);
				cancel();
			}
			break;

		default:
			break;
		}

	}

}
