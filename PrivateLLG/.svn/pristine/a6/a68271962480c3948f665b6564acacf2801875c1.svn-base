package com.llg.privateproject.utils;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.os.Environment;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.ImageView;

import com.google.gson.JsonParseException;
import com.google.gson.JsonParser;
import com.bjg.lcc.privateproject.R;

/**
 * 通用工具类
 * 
 * @author gongyibing
 * @version 1.0
 * @created 2015-05-07
 */
public class CommonUtils {
	private static final String TAG = "CommonUtils";

	/**
	 * 开启activity
	 */
	public static void launchActivity(Context context, Class<?> activity) {
		Intent intent = new Intent(context, activity);
		intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
		context.startActivity(intent);
	}

	public static void launchActivityForResult(Activity context,
			Class<?> activity, int requestCode) {
		Intent intent = new Intent(context, activity);
		intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
		context.startActivityForResult(intent, requestCode);
	}

	/**
	 * 隐藏软键盘
	 */
	public static void hideSoftKeybord(Activity activity) {
		if (null == activity) {
			return;
		}
		try {
			final View v = activity.getWindow().peekDecorView();
			if (v != null && v.getWindowToken() != null) {
				InputMethodManager imm = (InputMethodManager) activity
						.getSystemService(Context.INPUT_METHOD_SERVICE);
				imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
			}
		} catch (Exception e) {

		}
	}

	/**
	 * 判断是否为合法的json
	 * 
	 * @param jsonContent
	 *            需判断的字串
	 */
	public static boolean isJsonFormat(String jsonContent) {
		try {
			new JsonParser().parse(jsonContent);
			return true;
		} catch (JsonParseException e) {
			LogManag.i(TAG, "bad json: " + jsonContent);
			return false;
		}
	}

	/**
	 * 判断字符串是否为空
	 * 
	 * @return true null false !null
	 */
	public static boolean isNull(String text) {
		if (text == null || "".equals(text.trim()) || "null".equals(text))
			return true;
		return false;
	}

	/**
	 * 抖动动画
	 */
	public static void startShakeAnim(Context context, View view) {
		Animation shake = AnimationUtils.loadAnimation(context, R.anim.shake);
		view.startAnimation(shake);
	}

	/**
	 * 显示进度
	 * 
	 * @param context
	 * @param title
	 * @param message
	 * @param indeterminate
	 * @param cancelable
	 * @return
	 */
	public static ProgressDialog showProgress(Context context,
			CharSequence title, CharSequence message, boolean indeterminate,
			boolean cancelable) {
		ProgressDialog dialog = new ProgressDialog(context);
		dialog.setTitle(title);
		dialog.setMessage(message);
		dialog.setIndeterminate(indeterminate);
		dialog.setCancelable(cancelable);
		dialog.setCanceledOnTouchOutside(false);
		// dialog.setDefaultButton(false);
		dialog.show();
		return dialog;
	}

	public static void readBitMap(Context context, ImageView imageView,
			int resId) {
		BitmapFactory.Options opt = new BitmapFactory.Options();
		opt.inPreferredConfig = Bitmap.Config.RGB_565;
		opt.inPurgeable = true;
		opt.inInputShareable = true;
		// 获取资源图片
		InputStream is = context.getResources().openRawResource(resId);
		imageView.setImageBitmap(BitmapFactory.decodeStream(is, null, opt));
	}

	public static Rect calculateSrcRect(int srcWidth, int srcHeight,
			int dstWidth, int dstHeight) {
		final float srcAspect = (float) srcWidth / (float) srcHeight;
		final float dstAspect = (float) dstWidth / (float) dstHeight;
		if (srcAspect > dstAspect) {
			final int srcRectWidth = (int) (srcHeight * dstAspect);
			final int srcRectLeft = (srcWidth - srcRectWidth) / 2;
			return new Rect(srcRectLeft, 0, srcRectLeft + srcRectWidth,
					srcHeight);
		} else {
			final int srcRectHeight = (int) (srcWidth / dstAspect);
			final int scrRectTop = (int) (srcHeight - srcRectHeight) / 2;
			return new Rect(0, scrRectTop, srcWidth, scrRectTop + srcRectHeight);
		}

	}

	public static Rect calculateDstRect(int srcWidth, int srcHeight,
			int dstWidth, int dstHeight) {
		final float srcAspect = (float) srcWidth / (float) srcHeight;
		final float dstAspect = (float) dstWidth / (float) dstHeight;
		if (srcAspect > dstAspect) {
			return new Rect(0, 0, dstWidth, (int) (dstWidth / srcAspect));
		} else {
			return new Rect(0, 0, (int) (dstHeight * srcAspect), dstHeight);
		}

	}

	/**
	 * 对图片进行数据压缩
	 * 
	 * @param src
	 * @param format
	 * @param size
	 *            文件最后要求大小，单位：KB
	 * @return
	 */
	public static Bitmap compress(Bitmap src, CompressFormat format, int size) {
		ByteArrayOutputStream bai = new ByteArrayOutputStream();
		int quality = 100;
		int length = size * 1024 + 1;
		while (quality > 0 && length > size * 1024) {
			bai.reset();
			src.compress(format, quality, bai);
			length = bai.toByteArray().length;
			quality -= 2;
		}
		return BitmapFactory.decodeByteArray(bai.toByteArray(), 0,
				bai.toByteArray().length);
	}

	/**
	 * 获取压缩后的图片Byte数据
	 * 
	 * @param src
	 * @param format
	 * @param size
	 *            文件最后要求大小，单位：KB
	 * @return
	 */
	public static byte[] getCompressByteArray(Bitmap src,
			CompressFormat format, int size) {
		ByteArrayOutputStream bai = new ByteArrayOutputStream();
		int quality = 100;
		int length = size * 1024 + 1;
		while (quality > 0 && length > size * 1024) {
			bai.reset();
			src.compress(format, quality, bai);
			length = bai.toByteArray().length;
			if (quality <= 2)
				break;
			quality -= 2;
		}
		return bai.toByteArray();
	}

	/**
	 * 根据宽度缩放图
	 * 
	 * @param src
	 * @param width
	 * @return
	 */
	public static Bitmap scaleBitmap(Bitmap src, int width) {
		int scaleX = width;
		int scaleY = (int) (width / ((float) src.getWidth() / src.getHeight()));
		Matrix matrix = new Matrix();
		matrix.postScale((float) scaleX / src.getWidth(),
				(float) scaleY / src.getHeight());
		Bitmap newbm = Bitmap.createBitmap(src, 0, 0, src.getWidth(),
				src.getHeight(), matrix, true);
		return newbm;
	}

	/**
	 * 设置图片缓存路径
	 */
	public static final String createSDCardDir() {
		try {
			File sdcardDir = Environment.getExternalStorageDirectory();
			String path = sdcardDir.getPath() + "/LLG/";
			File path1 = new File(path);
			if (!path1.exists()) {
				path1.mkdirs();
			}
			return path;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	/**
	 * 根据手机的分辨率从 dp 的单位 转成为 px(像素)
	 */
	public static int dip2px(Context context, float dpValue) {
		final float scale = context.getResources().getDisplayMetrics().density;
		return (int) (dpValue * scale + 0.5f);
	}

	/**
	 * 根据手机的分辨率从 px(像素) 的单位 转成为 dp
	 */
	public static int px2dip(Context context, float pxValue) {
		final float scale = context.getResources().getDisplayMetrics().density;
		return (int) (pxValue / scale + 0.5f);
	}

}
