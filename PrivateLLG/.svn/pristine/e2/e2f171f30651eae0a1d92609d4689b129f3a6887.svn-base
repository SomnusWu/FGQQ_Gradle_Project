package com.llg.privateproject.view;

import java.util.ArrayList;

import android.content.Context;
import android.graphics.Color;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.ToggleButton;

import com.bjg.lcc.privateproject.R;

/**
 * 鑿滃崟鎺т欢澶撮儴锛屽皝瑁呬簡涓嬫媺鍔ㄧ敾锛屽姩鎬佺敓鎴愬ご閮ㄦ寜閽釜鏁�
 * 
 * @author Administrator
 * 
 */

public class ExpandTabView extends LinearLayout implements OnDismissListener {

	private ToggleButton selectedButton;
	private ArrayList<RelativeLayout> mViewArray = new ArrayList<RelativeLayout>();
	private ArrayList<ToggleButton> mToggleButton = new ArrayList<ToggleButton>();
	private Context mContext;
	private final int SMALL = 0;
	private int displayWidth;
	private int displayHeight;
	private PopupWindow popupWindow;
	private int selectPosition;
	private View viewLine;

	public ExpandTabView(Context context) {
		super(context);
		init(context);
	}

	public ExpandTabView(Context context, AttributeSet attrs) {
		super(context, attrs);
		init(context);
	}

	/**
	 * 根据选择的位置设置tabitem显示标题?
	 */
	public void setTitle(String valueText, int position, int flag) {
		if (position < mToggleButton.size()) {
			mToggleButton.get(position).setText(valueText);
			Log.i("tag", position + "----------position");
			Log.i("tag", position + "----------i");
			if (flag == 2) {
				for (int i = 0; i <= 2; i++) {
					if (position == i) {
						mToggleButton.get(i).setTextColor(
								mContext.getResources().getColor(
										R.color.orange1));
					} else {
						mToggleButton.get(i).setTextColor(
								mContext.getResources()
										.getColor(R.color.black1));
					}
				}
			} else {
				for (int i = 0; i < 3; i++) {
					mToggleButton.get(i).setTextColor(
							mContext.getResources().getColor(R.color.black1));
				}
			}
		}
	}

	/**
	 * 根据位置获取标题
	 */
	public String getTitle(int position) {
		if (position < mToggleButton.size()
				&& mToggleButton.get(position).getText() != null) {
			return mToggleButton.get(position).getText().toString();
		}
		return "";
	}

	public void setLine(View viewLine) {
		this.viewLine = viewLine;
	}

	/**
	 * 设置tabitem的个数和初始化?
	 */
	public void setValue(ArrayList<View> viewArray, int tabLineResId) {
		if (mContext == null) {
			return;
		}

		for (int i = 0; i < viewArray.size(); i++) {
			final RelativeLayout r = new RelativeLayout(mContext);
			int maxHeight = (int) (displayHeight * 1.0);
			RelativeLayout.LayoutParams rl = new RelativeLayout.LayoutParams(
					RelativeLayout.LayoutParams.MATCH_PARENT,
					RelativeLayout.LayoutParams.MATCH_PARENT);
			rl.leftMargin = 0;
			rl.rightMargin = 0;
			r.addView(viewArray.get(i), rl);
			View view = LayoutInflater.from(mContext).inflate(
					R.layout.toggle_button, this, false);
			ToggleButton tButton = (ToggleButton) view
					.findViewById(R.id.tooglebutton);
			mViewArray.add(r);
			r.setTag(SMALL);
			// ToggleButton tButton = new ToggleButton(mContext);
			// tButton.setGravity(Gravity.CENTER);
			// tButton.setTextOn(null);
			// tButton.setTextOff(null);
			// tButton.setBackgroundColor(Color.parseColor("#FFFFFF"));
			// tButton.setTextColor(Color.parseColor("#FF4C4C4C"));
			// // tButton.setBackgroundColor(Color.parseColor("#FFFFFF"));
			// tButton.setSingleLine(true);
			// tButton.setTextSize(TypedValue.COMPLEX_UNIT_SP, 13);
			// addView(tButton, new LayoutParams(0, 90, 1));
			addView(tButton);
			View line = new TextView(mContext);
			int width = dip2px(mContext, 1);
			int topMargin = dip2px(mContext, 5);
			line.setBackgroundResource(R.color.black3);
			if (i < viewArray.size() - 1) {
				LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(1,
						LinearLayout.LayoutParams.MATCH_PARENT);
				lp.topMargin = topMargin;
				lp.bottomMargin = topMargin;
				addView(line, lp);
			}
			mToggleButton.add(tButton);
			tButton.setTag(i);

			r.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					onPressBack();
				}
			});

			r.setBackgroundColor(Color.parseColor("#b0000000"));
			// tButton.setOnCheckedChangeListener(new OnCheckedChangeListener()
			// {
			//
			// @Override
			// public void onCheckedChanged(CompoundButton arg0, boolean arg1) {
			// // TODO Auto-generated method stub
			// if (arg1) {
			//
			// }
			// }
			// });
			tButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View view) {
					ToggleButton tButton = (ToggleButton) view;

					if (selectedButton != null && selectedButton != tButton) {
						selectedButton.setChecked(false);
					}
					selectedButton = tButton;
					selectPosition = (Integer) selectedButton.getTag();
					startAnimation();
					if (mOnButtonClickListener != null && tButton.isChecked()) {
						mOnButtonClickListener.onClick(selectPosition,
								popupWindow);
					}
				}
			});
		}
	}
	

	public int dip2px(Context context, double d) {
		final float scale = context.getResources().getDisplayMetrics().density;
		return (int) (d * scale + 0.5f);
	}

	private void startAnimation() {

		if (popupWindow == null) {
			popupWindow = new PopupWindow(mViewArray.get(selectPosition),
					displayWidth, displayHeight);
			// popupWindow.setAnimationStyle(R.style.popupWindowAnimation);
			popupWindow.setFocusable(false);
			popupWindow.setOutsideTouchable(true);
		}

		if (selectedButton.isChecked()) {
			if (!popupWindow.isShowing()) {
				showPopup(selectPosition);
			} else {
				popupWindow.setOnDismissListener(this);
				popupWindow.dismiss();
				hideView();
			}
		} else {
			if (popupWindow.isShowing()) {
				popupWindow.dismiss();
				hideView();
			}
		}
	}

	private void showPopup(int position) {
		if (popupWindow.getContentView() != mViewArray.get(position)) {
			popupWindow.setContentView(mViewArray.get(position));
		}
		popupWindow.showAsDropDown(this, 0, 0);
	}

	/**
	 * 如果菜单成展开状态，则让菜单收回
	 */
	public boolean onPressBack() {
		if (popupWindow != null && popupWindow.isShowing()) {
			popupWindow.dismiss();
			hideView();
			if (selectedButton != null) {
				selectedButton.setChecked(false);
			}
			return true;
		} else {
			return false;
		}

	}

	private void hideView() {
		View tView = mViewArray.get(selectPosition).getChildAt(0);

	}

	private void init(Context context) {
		// viewLine = LayoutInflater.from(context)
		// .inflate(R.layout.aty_business_list, null)
		// .findViewById(R.id.line);
		mContext = context;
		DisplayMetrics display = getResources().getDisplayMetrics();
		displayWidth = display.widthPixels;
		displayHeight = display.heightPixels;
		setOrientation(LinearLayout.HORIZONTAL);
	}

	@Override
	public void onDismiss() {
		showPopup(selectPosition);
		popupWindow.setOnDismissListener(null);
	}

	private OnButtonClickListener mOnButtonClickListener;

	/**
	 * 设置tabitem的点击监听事件?
	 */
	public void setOnButtonClickListener(OnButtonClickListener l) {
		mOnButtonClickListener = l;
	}

	/**
	 * 自定义tabitem点击回调接口
	 */
	public interface OnButtonClickListener {
		public void onClick(int selectPosition, PopupWindow popupWindow);
	}

	/**
	 * 
	 * 设置Tab上文字的大小.
	 * 
	 * @param size
	 */
	public void setTabTextSize(float size) {
		for (ToggleButton tab : mToggleButton) {
			tab.setTextSize(size);
		}
	}

	/**
	 * 
	 * 设置Tab上文字的颜色.
	 * 
	 * @param color
	 */
	public void setTabTextColor(int color) {
		for (ToggleButton tab : mToggleButton) {
			tab.setTextColor(color);
		}
	}
}
