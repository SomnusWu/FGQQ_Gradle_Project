package com.bjg.lcc.alipay.pay;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Random;

import org.json.JSONObject;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.FragmentActivity;
import android.text.TextUtils;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebView;
import android.widget.Toast;

import com.alipay.sdk.app.PayTask;
import com.bjg.lcc.alipay.pay.payfragment.Mydismiss;
import com.bjg.lcc.privateproject.R;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.llg.privateproject.AppContext;
import com.llg.privateproject.html.AndroidCallBack.HttpCallback;


public class PayActivity extends FragmentActivity implements Mydismiss {

	public static final String PARTNER = "2088911132152085";
	public static final String SELLER = "2855793518@qq.com";
	
	public static final String RSA_PRIVATE = "MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBANJ0iPk+xpDQgVWY5xzofsLYagWAMn6kfsvOf7OMx4xcjsxPu0KrcukLh13ljpVqSBz/2Iwn7iLQcC9WUkZ9RUJvRYbaHyf1FV5WqPPIkm3ixlbwNVSkZN8WlnCk8RFt/U4agnr2VN1xGHeZlQpcZ/CYsdZKlTiw9gtnUa0mEYGrAgMBAAECgYBHNzoWpcCJxpTNg2VJqf8jLhqKa/wqUL27d9BM0OnBvJxx1NU4VU4YQFd5VbHvK7zlW0pK+0QhMcmUqzBCPCfQGzXFXpERLzOD9MNsKljeAfB4bRAinOVf5H0BFEDMlEGVTdzYIn2RakDprahvDgR6v8RfAgGiSDpX8+dsAeykCQJBAO3cjshTB/RkrCTRvyOungKFzN2owl79thpPbyfLr+AV6sRC9SNK1OPgZWesUePaTg42ELUk1HQeuVxOzd+hOA0CQQDigPYUhD8e8AiMXzNI3WPF/ycdkRDGnva6B8x0gFiA6mIEC5O6/GnF4dqAqE+shBFsxOcFWIQrJjTkkSt4QLqXAkBOsXODjwTItC3HmKT19yVLjFy00MpNhv6iQblynw62wkmDWOulG3LHWUvzOq11BppgVT69z0uCh0+n3GJ8I+hZAkEAxXK6EYR/Kc8BBKzwnfIwSad1R7bvstVcKyslNeG0RR0MuI4HCBeFdTS/LyyJ18+BCRpUcTqKbLrvnNhX1opGnQJBAOD/aph7x2IqQIAgZBJXPC61qF1pOut+GOSxeywUQu7CHQfLJ1R2zrOOsXmkfIKSR0xpN0uKO0Fi+ztZVdDUFMU=";

	public static final String RSA_PUBLIC = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCnxj/9qwVfgoUh/y2W89L6BkRAFljhNhgPdyPuBV64bfQNN1PjbCzkIM6qRdKBoLPXmKKMiFYnkd6rAoprih3/PrQEB/VsW8OoM8fxn67UDYuyBTqA23MML9q1+ilIZwBC2AQ2UBVOrFXfFl75p6/B5KsiNG9zpgmLCUYuLkxpLQIDAQAB";
	
	
	private static final int SDK_PAY_FLAG = 1;
	private static final int SDK_CHECK_FLAG = 2;
	String payCode;
	String out_trade_no;
	private Handler mHandler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case SDK_PAY_FLAG: {
				Result resultObj = new Result((String) msg.obj);
				String resultStatus = resultObj.resultStatus;
			
				SharedPreferences sp=getSharedPreferences("user", Context.MODE_PRIVATE);
				if (TextUtils.equals(resultStatus, "9000")) {
					String[] myresultParams = resultObj.result.split("&");
					for (String string : myresultParams) {
						if(string.startsWith("out_trade_no")){
							out_trade_no=getValue(string, "out_trade_no");
						}
						PayActivity.this.finish();
					}

					
					Toast.makeText(PayActivity.this, "支付成功", Toast.LENGTH_SHORT)
							.show();
				} else if (TextUtils.equals(resultStatus, "8000")) {
					Toast.makeText(PayActivity.this, "支付结果确认中",
							Toast.LENGTH_SHORT).show();
				}
				else if (TextUtils.equals(resultStatus, "4000")) {
					Toast.makeText(PayActivity.this, "系统异常", Toast.LENGTH_SHORT)
							.show();
				}
				else if (TextUtils.equals(resultStatus, "4001")) {
					Toast.makeText(PayActivity.this, "数据格式不正确", Toast.LENGTH_SHORT)
					.show();
				}
				else if (TextUtils.equals(resultStatus, "4003")) {
					Toast.makeText(PayActivity.this, "该用户绑定的支付宝账户被冻结或不允许支付", Toast.LENGTH_SHORT)
					.show();
				}
				else if (TextUtils.equals(resultStatus, "4004")) {
					Toast.makeText(PayActivity.this, "该用户已解除绑定", Toast.LENGTH_SHORT)
					.show();
				}
				else if (TextUtils.equals(resultStatus, "4005")) {
					Toast.makeText(PayActivity.this, "绑定失败或没有绑定", Toast.LENGTH_SHORT)
					.show();
				}
				else if (TextUtils.equals(resultStatus, "4006")) {
					Toast.makeText(PayActivity.this, "订单支付失败", Toast.LENGTH_SHORT)
					.show();
				}
				else if (TextUtils.equals(resultStatus, "4010")) {
					Toast.makeText(PayActivity.this, "重新绑定账户", Toast.LENGTH_SHORT)
					.show();
				}
				else if (TextUtils.equals(resultStatus, "6000")) {
					Toast.makeText(PayActivity.this, "支付服务正在进行升级操作", Toast.LENGTH_SHORT)
					.show();
				}
				else if (TextUtils.equals(resultStatus, "6001")) {
					Toast.makeText(PayActivity.this, "用户中途取消支付操作", Toast.LENGTH_SHORT)
					.show();
					PayActivity.this.finish();
				}
				else if (TextUtils.equals(resultStatus, "7001")) {
					Toast.makeText(PayActivity.this, "网页支付失败", Toast.LENGTH_SHORT)
					.show();
				}

				break;
			}
			case SDK_CHECK_FLAG: {
				Toast.makeText(PayActivity.this, "检查结果为：" + msg.obj,
						Toast.LENGTH_SHORT).show();
				break;
			}
			default:
				break;
			}
		};
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
		// WindowManager.LayoutParams.FLAG_FULLSCREEN);
		setContentView(R.layout.pay_main);
		Window myWindow = getWindow();
		
		myWindow.setBackgroundDrawableResource(R.color.transparent);
		WindowManager.LayoutParams lp = getWindow().getAttributes();
		WindowManager wm = getWindowManager();
		Display display = wm.getDefaultDisplay();

		lp.width = (int) (display.getWidth() * 0);
		 lp.height=(int) (display.getHeight()*0);
		myWindow.setAttributes(lp);
//		 mypay();
		toapliay();
	}
private void mypay(){
	WebView wv=new WebView(this);
	wv.loadUrl(R.string.test_data_server_urlm+"common/alipay/pay?"+"id="+ getIntent().getStringExtra("code")+
			"&asset="+getIntent().getStringExtra("price"));
//	RequestParams params=new RequestParams();
//	params.addQueryStringParameter("id", getIntent().getStringExtra("code"));
//	params.addQueryStringParameter("asset", "0.1");
////	params.addQueryStringParameter("asset", getIntent().getStringExtra("price"));
//	AppContext.getHtmlUitls().xUtils(this, HttpMethod.POST, "alipay/pay", params, new HttpCallback() {
//		
//		@Override
//		public void onError(String msg) {
//			// TODO Auto-generated method stub
//			Log.d("my", "msg"+msg);
//		}
//		
//		@Override
//		public void onBack(JSONObject json) {
//			// TODO Auto-generated method stub
//			Log.d("my", "json"+json);
//		}
//	});
	finish();
}
	/**
	 * call alipay sdk pay. 调用SDK支付
	 * 
	 */
	public void pay(View v) {
		toapliay();
	}

	public void toapliay() {
		Intent intent = getIntent();
		payCode=intent.getStringExtra("code");
		Log.d("my", "payCode:"+payCode);
		Log.d("my", "payCode:"+payCode);
		String name;
		if(intent.getStringExtra("name")==null){
			name="支付金额"+intent.getStringExtra("price");
		}
		else {
			name=intent.getStringExtra("name");
		}
		String orderInfo = getOrderInfo(
				name,   
				"1",//intent.getStringExtra("singlePrice")
				intent.getStringExtra("price"));
//		"0.01");


		String sign = sign(orderInfo);
		try {
			// 仅需对sign 做URL编码
			sign = URLEncoder.encode(sign, "utf-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
	
		final String payInfo = orderInfo + "&sign=\"" + sign + "\"&"
				+ getSignType();

		Runnable payRunnable = new Runnable() {

			@Override
			public void run() {
				// 构造PayTask 对象
				PayTask alipay = new PayTask(PayActivity.this);
				// 调用支付接口
				String result = alipay.pay(payInfo);

				Message msg = new Message();
				msg.what = SDK_PAY_FLAG;
				msg.obj = result;
				mHandler.sendMessage(msg);
			}
		};

		Thread payThread = new Thread(payRunnable);
		payThread.start();
	}

	/**
	 * check whether the device has authentication alipay account.
	 * 查询终端设备是否存在支付宝认证账户
	 * 
	 */
	public void check(View v) {
		Runnable checkRunnable = new Runnable() {

			@Override
			public void run() {
				PayTask payTask = new PayTask(PayActivity.this);
				boolean isExist = payTask.checkAccountIfExist();

				Message msg = new Message();
				msg.what = SDK_CHECK_FLAG;
				msg.obj = isExist;
				mHandler.sendMessage(msg);
			}
		};

		Thread checkThread = new Thread(checkRunnable);
		checkThread.start();

	}
	/**隐藏*/
	public void back(View v){
		this.finish();
	}
	/**
	 * get the sdk version. 获取SDK版本号
	 * 
	 */
	public void getSDKVersion() {
		PayTask payTask = new PayTask(this);
		String version = payTask.getVersion();
		Toast.makeText(this, version, Toast.LENGTH_SHORT).show();
	}

	/**
	 * create the order info. 创建订单信息
	 * 
	 */
	public String getOrderInfo(String subject, String body, String price) {
		// 合作者身份ID
		String orderInfo = "partner=" + "\"" + PARTNER + "\"";

		// 卖家支付宝账号
		orderInfo += "&seller_id=" + "\"" + SELLER + "\"";

		// 商户网站唯一订单号
		orderInfo += "&out_trade_no=" + "\"" + payCode + "\"";

		// 商品名称
		orderInfo += "&subject=" + "\"" + subject + "\"";

		// 商品详情
		orderInfo += "&body=" + "\"" + body + "\"";

		// 商品金额
		orderInfo += "&total_fee=" + "\"" + price + "\"";

		// 服务器异步通知页面路径
		
			orderInfo += "&notify_url=" + "\"" + 
//					"http://113.205.154.144:8090/llgweb/"+
				getResources().getString(R.string.pay_back)	+ 
				"common/alipay/mobnotify"
					
+ "\"";
		
		// 接口名称， 固定值
		orderInfo += "&service=\"mobile.securitypay.pay\"";

		// 支付类型， 固定值
		orderInfo += "&payment_type=\"1\"";
		// 参数编码， 固定值
		orderInfo += "&_input_charset=\"utf-8\"";

		// 设置未付款交易的超时时间
		// 默认30分钟，一旦超时，该笔交易就会自动被关闭。
		// 取值范围：1m～15d。
		// m-分钟，h-小时，d-天，1c-当天（无论交易何时创建，都在0点关闭）。
		// 该参数数值不接受小数点，如1.5h，可转换为90m。
		orderInfo += "&it_b_pay=\"30m\"";
		// 支付宝处理完请求后，当前页面跳转到商户指定页面的路径，可空
		orderInfo += "&return_url=\"m.alipay.com\"";
		// 调用银行卡支付，需配置此参数，参与签名， 固定值
		// orderInfo += "&paymethod=\"expressGateway\"";

		return orderInfo;
	}

	/**
	 * get the out_trade_no for an order. 获取外部订单号
	 * 
	 */
	public String getOutTradeNo() {
		SimpleDateFormat format = new SimpleDateFormat("MMddHHmmss",
				Locale.getDefault());
		Date date = new Date();
		String key = format.format(date);

		Random r = new Random();
		key = key + r.nextInt();
		key = key.substring(0, 15);
		return key;
	}

	/**
	 * sign the order info. 对订单信息进行签名
	 * 
	 * @param content
	 *            待签名订单信息
	 */
	public String sign(String content) {
		
		return SignUtils.sign(content, RSA_PRIVATE);
	}

	/**
	 * get the sign type we use. 获取签名方式
	 * 
	 */
	public String getSignType() {
		return "sign_type=\"RSA\"";
	}

	@Override
	public boolean mDismiss(boolean isDismiss) {
		// TODO Auto-generated method stub
		PayActivity.this.finish();
		return false;
	}
private String getValue(String content,String key){
		
		String prefix = key + "=\"";
		return content.substring(content.indexOf(prefix) + prefix.length(),
				content.lastIndexOf("\""));	
	}
}
